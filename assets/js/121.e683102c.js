(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{343:function(s,a,t){"use strict";t.r(a);var l=t(16),e=Object(l.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("title: '数据结构javascript描述：集合 '\nauthor: jsliushen\ntags:")]),s._v(" "),t("ul",[t("li",[s._v("数据结构\ncategories:")]),s._v(" "),t("li",[s._v("technology\ndate: 2017-12-16 00:11:00")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("集合是由一组无序且唯一的项组成的。你可以把集合想像成一个既没有重复元素，也没有顺序的数组。这个数据结构与数学中的有限集合相同。在数学中，集合有交集、并集、差集、子集等概念。"),t("br"),s._v("\n在ES6中已经支持Set这一数据结构，但是并没有实现交并这些方法。本篇文章将基于ES5，使用对象的方式来模拟实现Set以及它的常用方法.文章的最后我们会将我们模拟实现的Set和ES6中的Set做一个对比。")]),s._v(" "),t("h3",{attrs:{id:"集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[s._v("#")]),s._v(" 集合")]),s._v(" "),t("p",[s._v("我们使用对象而不是数组来模拟集合，最主要的一个原因就是对象中的属性名和属性值一一对应，不会出现一个属性名指向两个不同的值，这种唯一性正是集合需要的。在集合中，通常需要以下方法：")]),s._v(" "),t("ul",[t("li",[s._v("has(value):  如果集合中包含某个元素，返回true，否则返回false")]),s._v(" "),t("li",[s._v("add(value):  向集合中添加一个新的元素")]),s._v(" "),t("li",[s._v("delete(value):  删除集合中的某个元素")]),s._v(" "),t("li",[s._v("clear():  清空集合")]),s._v(" "),t("li",[s._v("size(): 返回集合中元素的个数")]),s._v(" "),t("li",[s._v("values(): 返回一个包含集合中所有值的数组")])]),s._v(" "),t("p",[s._v("下面我们一个一个来实现这些方法，首先给出集合最基本的结构")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("Set")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" items = {};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".has = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".add = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".delete = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".clear = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".size = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".values = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{};\n}\n")])])]),t("h4",{attrs:{id:"has"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#has"}},[s._v("#")]),s._v(" has")]),s._v(" "),t("p",[s._v("我们往集合中存储值的时候，将items中的属性名和属性值设置成一样的, "),t("code",[s._v("items[value] = value")]),s._v(" , 这样方便我们查找。 检测集合中是否包含某元素，只需要检测一下对象items中是否包含某属性。在对象中，我们有in操作符和hasOwnProperty方法来检测属性，in操作符会检测出对象原型中的属性，这里我们推荐使用hasOwnProperty。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".has = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("value")]),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" items.hasOwnProperty(value);\n}\n")])])]),t("h4",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[s._v("#")]),s._v(" add")]),s._v(" "),t("p",[s._v("向集合中添加元素，相当于是给items对象添加属性。有一点需要注意，集合中的值不允许重复，所以在添加之前需要检测一下待添加的值是否已存在。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".add = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("value")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".has(value)) {\n        items[value] = value;\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n}\n")])])]),t("h4",{attrs:{id:"delete"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[s._v("#")]),s._v(" delete")]),s._v(" "),t("p",[s._v("移除集合中的元素，相当于是删除items对象的属性。我们可以借助delete操作符来删除对象的属性。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".delete = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("value")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".has(value)) {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("delete")]),s._v(" items[value];\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v("\n}\n")])])]),t("h4",{attrs:{id:"clear"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clear"}},[s._v("#")]),s._v(" clear")]),s._v(" "),t("p",[s._v("清空集合，相当于是清空items对象。我们可以循环delete对象的属性，但这这样实在是太蠢了，我们可以直接将items重新赋值为一个新的空对象。")]),s._v(" "),t("div",{staticClass:"language-javscript extra-class"},[t("pre",[t("code",{staticClass:"language-javscript"},[s._v("this.clear = function () {\n\titems = {};\n    return true;\n}\n")])])]),t("h4",{attrs:{id:"size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#size"}},[s._v("#")]),s._v(" size")]),s._v(" "),t("p",[s._v("返回集合中元素的个数，也就是集合中属性的个数。这里我们可以借助Object.key(obj)方法，该方法可以返回对象中属性名组成的数组，然后我们可以使用数组的length属性，返回集合的长度。当然我们也可以使用比较原始的方法，循环计数。这里我们给出两种实现，大家可以对比查看。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-comment"},[s._v("//方法一")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".size = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v(".keys(items).length;\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("//方法二")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".size = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" count = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" key "),t("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" items){\n    \t"),t("span",{staticClass:"hljs-comment"},[s._v("//把原型对象上的属性过滤掉")]),s._v("\n    \t"),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v("(items.hasOwnProperty(key)){\n        \tcount++;\n        }\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" count;\n}\n")])])]),t("h4",{attrs:{id:"values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#values"}},[s._v("#")]),s._v(" values")]),s._v(" "),t("p",[s._v("返回集合中值组成的数组，这里我们可以循环取出对象items中的值，添加进一个空数组，最后返回该数组就可以了。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".values = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr = [];\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(",keys = "),t("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v(".keys(items),key;key=keys[i++];){\n    \tarr.push(items[key])\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" arr;\n}\n")])])]),t("p",[s._v("考虑到兼容性，我们可以参考size中方法二，使用for···in和hasOwnProperty来循环。这里就不给出代码了，大家可以对照实现。")]),s._v(" "),t("h4",{attrs:{id:"测试一下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试一下"}},[s._v("#")]),s._v(" 测试一下")]),s._v(" "),t("p",[s._v("集合的常用方法已经实现了，下面我们来测试一下。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set();\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".add(1);\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".add(2);\nconsole.log("),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".values());  //[1,2]\nconsole.log("),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".has(1));    //true\nconsole.log("),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".has(2));    //true\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".delete(2); \nconsole.log("),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".values());  //[1]\nconsole.log("),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".size());    //1\n")])])]),t("p",[s._v("集合的常用方法没问题了，下面我们来实现数学中集合的交、并等操作。")]),s._v(" "),t("h4",{attrs:{id:"交集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交集"}},[s._v("#")]),s._v(" 交集")]),s._v(" "),t("p",[s._v("数学中，集合A和集合B的交集表示为： A∩B，含义为：{x|x∈A∧x∈B}。意思是，元素既存在于集合A中，又存在于集合B中。例如{1,2,3}∩{2,3,4}={2,3}。"),t("br"),s._v("\n在代码中，我们可以根据这个定义，先创建一个空集合C，然后循环集合A和集合B，如果一个元素在A和B中都存在，我们就把这个元素添加集合C，最后集合C就是我们需要的交集。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\t"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".intersection = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("setB")]),s._v(") ")]),s._v("{\n        "),t("span",{staticClass:"hljs-comment"},[s._v("//这里的this就是集合A，参数setB是集合B，我们再创建集合C表示它们的交集")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setC = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" values = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".values();\n        "),t("span",{staticClass:"hljs-comment"},[s._v("//遍历集合A中的元素")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", value; value = values[i++];) {\n        \t"),t("span",{staticClass:"hljs-comment"},[s._v("//如果集合B中也存在该元素，说明该元素属于它们的交集")]),s._v("\n            "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (setB.has(value)) {\n                setC.add(value);\n            }\n        }\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" setC;\n    }\n")])])]),t("p",[s._v("测试一下：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setA,\nsetB,\nsetC;\nsetA = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\nsetB = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(");\nsetC = setA.intersection(setB);\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(setC.values());  "),t("span",{staticClass:"hljs-comment"},[s._v("//[1]")]),s._v("\n")])])]),t("h4",{attrs:{id:"并集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并集"}},[s._v("#")]),s._v(" 并集")]),s._v(" "),t("p",[s._v("数学中，集合A和集合B的并集表示为： A∪B，含义为：{x|x∈A∨x∈B}。意思是，元素属于A或者元素属于B。例如{1,2,3}∪{2,3,4}={1,2,3,4}。"),t("br"),s._v("\n在代码中，我们可以根据这个定义，先创建一个空集合C，然后循环集合A和集合B，将A和B中的元素都添加进集合C。集合的add方法会检测是否有重复值，相当于自动帮我们去除了重复值。最后得到的集合C就是我们需要的并集。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\t"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".union = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("setB")]),s._v(") ")]),s._v("{\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" SetC = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" values = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".values();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", value; value = values[i++];) {\n            SetC.add(value);\n        }\n        values = setB.values();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", value; value = values[i++];) {\n            SetC.add(value);\n        }\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" SetC;\n    }\n")])])]),t("p",[s._v("测试一下：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setA,\nsetB,\nsetC;\nsetA = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\nsetB = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(");\nsetC = setA.union(setB);\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(setC.values());  "),t("span",{staticClass:"hljs-comment"},[s._v("//[1,2,3]")]),s._v("\n")])])]),t("h4",{attrs:{id:"差集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#差集"}},[s._v("#")]),s._v(" 差集")]),s._v(" "),t("p",[s._v("数学中，集合A和集合B的差集表示为：A-B或A\\B，含义为：{x|x∈A∧x∉B'}。意思是，元素属于A但是不属于B。例如{1,2,3}-{2,3,4}={1}。"),t("br"),s._v("\n在代码中，我们可以根据这个定义，先创建一个空集合C，然后循环集合A和集合B，如果一个元素在A中存在但是在B中不存在，我们就把这个元素添加集合C，最后集合C就是我们需要的差集。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\t"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".difference = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("setB")]),s._v(") ")]),s._v("{\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setC = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" values = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".values();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", value; value = values[i++];) {\n            "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!setB.has(value)) {\n                setC.add(value);\n            }\n        }\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" setC;\n    }\n")])])]),t("p",[s._v("测试一下：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setA,\nsetB,\nsetC;\nsetA = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\nsetB = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(");\nsetC = setA.difference(setB);\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(setC.values());  "),t("span",{staticClass:"hljs-comment"},[s._v("//[2]")]),s._v("\n")])])]),t("h4",{attrs:{id:"子集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子集"}},[s._v("#")]),s._v(" 子集")]),s._v(" "),t("p",[s._v("如果集合A中的每一个元素都属于集合B，就说集合A是几个B的子集，计作A⊆B。"),t("br"),s._v("\n在代码中，我们只需要遍历集合A和集合B，如果存在某个元素属于集合A，但是不属于集合B，那么就说明A不是B的子集。")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\t"),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".subset = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("setB")]),s._v(") ")]),s._v("{\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" values = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".values();\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", value; value = values[i++];) {\n            "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!setB.has(value)) {\n                "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n            }\n        }\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n    }\n")])])]),t("p",[s._v("测试一下：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setA,\nsetB;\nsetA = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetA.add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\nsetB = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\nsetB.add("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(");\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(setA.subset(setB));  "),t("span",{staticClass:"hljs-comment"},[s._v("//true")]),s._v("\n")])])]),t("h4",{attrs:{id:"es6中的set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6中的set"}},[s._v("#")]),s._v(" ES6中的Set")]),s._v(" "),t("p",[s._v("ES6中新增了Set类，具体点细节大家可以自行搜索资料，网上已经有很多介绍了。和我们模拟实现的Set不同，ES6中的Set的values方法返回不是值构成的数组，而是迭代器Interator。还有一个区别是，ES6的Set自带有size属性。"),t("br"),s._v("\n下面我们使用ES6中的Set来实现集合中的交集并集等操作。")]),s._v(" "),t("h4",{attrs:{id:"set类模拟交集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set类模拟交集"}},[s._v("#")]),s._v(" Set类模拟交集")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" intersection = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("SetA,SetB")]),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setC = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" SetA){\n    \t"),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v("(setB.has(i)){\n        \tsetC.add(i);\n        }\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" setC;\n}\n")])])]),t("h4",{attrs:{id:"set类模拟并集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set类模拟并集"}},[s._v("#")]),s._v(" Set类模拟并集")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" union = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("SetA,SetB")]),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setC = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" SetA){\n        setC.add(i);\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" SetB){\n        setC.add(i);\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" setC;\n}\n")])])]),t("h4",{attrs:{id:"set类模拟差集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set类模拟差集"}},[s._v("#")]),s._v(" Set类模拟差集")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" difference = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("SetA,SetB")]),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" setC = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" SetA){\n    \t"),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v("(!setB.has(i)){\n        \tsetC.add(i);\n        }\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" setC;\n}\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);