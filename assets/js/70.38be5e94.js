(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{337:function(s,a,t){"use strict";t.r(a);var n=t(16),l=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"启示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启示"}},[s._v("#")]),s._v(" 启示")]),s._v(" "),t("ul",[t("li",[s._v("JavaScript中闭包无处不在，你只需要能够识别并拥抱它。")]),s._v(" "),t("li",[s._v("闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。")])]),s._v(" "),t("h2",{attrs:{id:"实质问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实质问题"}},[s._v("#")]),s._v(" 实质问题")]),s._v(" "),t("p",[s._v("什么是闭包?(广义版)"),t("br"),s._v("\n书中解释: 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。"),t("br"),s._v("\nMDN的解释: 闭包是函数和声明该函数的词法环境的组合。"),t("br"),s._v("\n我的解释(详细版): 必须包含两点:")]),s._v(" "),t("p",[s._v("1,有函数.由于函数自身的特性,它能访问所在的词法作用域.并能保存外部词法作用域的变量和函数到自己的函数作用域.\n2,有该函数所在的词法环境.其实在JavaScript中任何函数都会处在一个词法环境中.不管是全局作用域还是函数作用域.")]),s._v(" "),t("p",[s._v("综上简单版就是: MDN的解释 -- 闭包是函数和声明该函数的词法环境的组合。")]),s._v(" "),t("p",[s._v("还可以继续延伸成极简版: JavaScript中的函数就会形成闭包。")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("注意到上面对词法作用域和词法环境两词的分开使用了吗?")]),s._v(" "),t("ol",[t("li",[s._v("此时函数还没被执行,所以使用的是词法作用域即静态作用域")]),s._v(" "),t("li",[s._v("此时函数被执行,此时词法作用域就会变成词法环境(包含静态作用域与动态作用域).所以其实MDN的解释其实更准确一点")])])]),s._v(" "),t("p",[s._v("我们日常使用时所说的闭包(狭义版,严格意义上的):")]),s._v(" "),t("p",[s._v("为了便于对闭包作用域的观察和使用.我们实际使用时会将闭包的函数作用域暴露给当前词法作用域之外.也就是本书一直强调的闭包函数需要在它本身的词法作用域以外执行.作者认为符合这个条件才称得上是真正的闭包(也就是我们日常使用常说的'使用闭包',并且使用任何回调函数其实也是闭包).")]),s._v(" "),t("p",[s._v("所以狭义版就是:闭包是函数和声明该函数的词法环境的组合,并且将闭包的函数作用域暴露给当前词法作用域之外.")]),s._v(" "),t("p",[s._v("闭包暴露函数作用域的三种方式:\n下面部分是书中没有的,是自己实际使用时的总结,并且符合这三种形式之一的就是我们日常使用时所说的闭包(狭义版)")]),s._v(" "),t("ol",[t("li",[s._v("通过外部函数的参数进行暴露.")])]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("foo")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" a = "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(";\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("bar")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n   baz(a) "),t("span",{staticClass:"hljs-comment"},[s._v("//通过外部函数的参数进行暴露")]),s._v("\n  }\n  bar(); \n};\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("baz")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("val")]),s._v(") ")]),s._v("{ \n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( val ); "),t("span",{staticClass:"hljs-comment"},[s._v("// 2 ")]),s._v("\n}\nfoo();\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("通过外部作用域的变量进行暴露")])]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" val;\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("foo")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" a = "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(";\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("bar")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n   val=a "),t("span",{staticClass:"hljs-comment"},[s._v("//通过外部作用域的变量进行暴露")]),s._v("\n  }\n  bar(); \n};\nfoo();\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(val)  "),t("span",{staticClass:"hljs-comment"},[s._v("//2")]),s._v("\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("通过return直接将整个函数进行暴露")])]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("foo")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" a = "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(";\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("bar")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(a)\n  }\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" bar "),t("span",{staticClass:"hljs-comment"},[s._v("//通过return直接将整个函数进行暴露")]),s._v("\n};\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" val=foo();\nval()  "),t("span",{staticClass:"hljs-comment"},[s._v("//2")]),s._v("\n")])])]),t("p",[s._v("关于闭包的内存泄露问题:")]),s._v(" "),t("p",[s._v("首先必须声明一点: 使用闭包并不一定会造成内存泄露,只有使用闭包不当才可能会造成内存泄露.(吐槽:面试很多新人时,张口就说闭包会造成内存泄露)")]),s._v(" "),t("p",[s._v("为什么闭包可能会造成内存泄露呢? 原因就是上面提到的,因为它一般会暴露自身的作用域给外部使用.如果使用不当,就可能导致该内存一直被占用,无法被JS的垃圾回收机制回收.就造成了内存泄露.\n注意: 即使闭包里面什么都没有,闭包仍然会隐式地引用它所在作用域里的所用变量.   正因为这个隐藏的特点,闭包经常会发生不易发现的内存泄漏问题.")]),s._v(" "),t("p",[s._v("常见哪些情况使用闭包会造成内存泄露:")]),s._v(" "),t("ol",[t("li",[s._v("使用定时器未及时清除.因为计时器只有先停止才会被回收.所以决办法很简单,将定时器及时清除,并将造成内存的变量赋值为null(变成空指针)")]),s._v(" "),t("li",[s._v("相互循环引用.这是经常容易犯的错误,并且也不容易发现.举个栗子:")])]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("foo")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" a = {}; \n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("bar")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(a); \n  }; \n  a.fn = bar; \n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" bar; \n};\n")])])]),t("p",[s._v("这里创建了一个a 的对象，该对象被内部函数bar引用。然后，a创建了一个属性fn指向了bar，最后返回了innerFn()。这样就形成了bar和a的相互循环引用.可能有人说bar里不使用console.log(a)不就没有引用了吗就不会造成内存泄露了.NONONO,bar作为一个闭包,即使它内部什么都没有,foo中的所有变量都还是隐使地被 bar所引用。这个知识点是我前面忘记提到的,也是书中没有提到的.算了我现在加到前面去吧.所以即使bar内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将 "),t("code",[s._v("a.fn = bar")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("将闭包引用到全局变量上.因为全局变量是只有当页面被关闭的时候才会被回收.")]),s._v(" "),t("li",[s._v("在闭包中对DOM进行不当的引用.这个常见于老IE浏览器,现代浏览器已经长大了,已经学会了自己处理这种情况了.这里就不赘述了.想知道的可以自行问谷娘和度娘.")])]),s._v(" "),t("p",[s._v("总而言之,解决办法就是使闭包的能正常引用,能被正常回收.如果实在不行,就是在使用完后,手动将变量赋值null,强行进行垃圾回收.")]),s._v(" "),t("h2",{attrs:{id:"循环和闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环和闭包"}},[s._v("#")]),s._v(" 循环和闭包")]),s._v(" "),t("p",[s._v("看如下例子:")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i="),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i<="),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("; i++) { \n  setTimeout( "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("timer")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( i );\n  }, i*"),t("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" );\n}\n")])])]),t("p",[s._v("我们期望的结果是分别输出数字 1~5，每秒一次，每次一个。"),t("br"),s._v("\n但实际结果是,这段代码在运行时会以每秒一次的频率输出五次 6。"),t("br"),s._v("\n(关于书里的解释,我觉得有点说复杂了,没说到点子上,下面是我的解释.)")]),s._v(" "),t("p",[s._v("为什么会是这样的结果?")]),s._v(" "),t("p",[s._v("timer毫无疑问是一个闭包,它是可以访问到外部的变量i.在进行for循环时,timer()会被重复执行5次,也就是它会 console.log( i )5次.(关键部分来了!)这5次i其实是同一个i.它是来自于外部作用域,即for里面声明的i.在词法作用域中变量i只可能对应一个唯一的值,即变量和它的值是一一对应的.不会变化的.那这个值到底是多少呢?这个值就是最终值! i的最终值就是6即for循环完后i的值.当引擎执行console.log( i )时,它会询问i所对应的作用域,问它i的值是多少.这个时候作用域进行RHS查询得到的结果就是最终值6.")]),s._v(" "),t("p",[s._v("为什么我们会以为分别输出1~5?")]),s._v(" "),t("p",[s._v("因为在for循环中,我们错以为每一次循环时,函数所输出的i是根据循环动态变化的.即是1~5累加变化的.但实际上它所访问的i是同一个固定不变的值,即最终值6.可能你会有这样的疑惑,那我循环还有意义吗?i其实一开始就确定是6了.没有变化过!错!i变化过,它的确是从1逐步增加到6的.只是外部作用域的i值只可能是循环完后的最终值,并且函数timer()并没有保存每次i变化的值.它只是访问了外部作用域的i值即最终的值6. OK我们知道了出错的地方,就是我们没有把每次i的值保存在一个独立的作用域中.\n接下来,看下这个改进的例子结果是多少.")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i="),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i<="),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("; i++) { \n  ("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    setTimeout( "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("timer")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n\t    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( i );\n    }, i*"),t("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" );\n  })();\n}\n")])])]),t("p",[s._v('它的最终值仍然是5个6.为什么?我们来分析下,上例中,它用了一个匿名函数包裹了定时器,并立即执行.在进行for循环时,会创造5个独立的函数作用域(由匿名函数创建的,因为它是闭包函数).但是这5个独立的函数作用域里的i也全都是对外部作用域的引用.即它们访问的都是i的最终值6.这并不是我们想要的,我们要的是5个独立的作用域,并且每个作用域都保存一个"当时"i的值.')]),s._v(" "),t("p",[s._v("解决办法:")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i="),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i<="),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("; i++) { \n  ("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" j =i;\n    setTimeout( "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("timer")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n\t    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( j );\n    }, j*"),t("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" );\n  })();\n}\n")])])]),t("p",[s._v("这样改写后,匿名函数每次都通过j保存了每次i值,这样i值就通过j保存在了独立的作用域中.注意此时保存的i值是'当时'的值,并不是循环完后的最终值.这样循环完后,实际上就创建了5个独立的作用域,每个作用域都保存了一个'当时'i的值(通过j).当引擎执行console.log( j )询问其对应的独立作用域时,得到的值就是'当时'保存的值,再也不是6了.")]),s._v(" "),t("p",[s._v("我们还可以进一步简写为这样:")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i="),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i<="),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("; i++) { \n  ("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("j")]),s._v(") ")]),s._v("{\n    setTimeout( "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("timer")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n      "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( j );\n    }, j*"),t("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" );\n  })(i);\n}\n")])])]),t("p",[s._v("利用块作用域进行解决:"),t("br"),s._v("\n在es6中,我们不仅可以使用函数来创建一个独立的作用域,我们还可以使用let声明来创建一个独立的块作用域(在{}内).所以我们还可以这样改写:")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i="),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i<="),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("; i++) { \n  setTimeout( "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("timer")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( i );\n  }, i*"),t("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" );\n}\n")])])]),t("p",[s._v("这样改写,在每次循环时,let都会对i进行声明.并通过循环自带的{}创建一个独立的块作用域.并且let声明的i,保存了'当时'i的值在当前块作用域里.因此当引擎执行console.log( i )时,它会询问对应的块作用域上i的值,得到的结果就是'当时'保存的值.")]),s._v(" "),t("h2",{attrs:{id:"模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[s._v("#")]),s._v(" 模块")]),s._v(" "),t("p",[s._v("首先看下面的例子:")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("CoolModule")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" something = "),t("span",{staticClass:"hljs-string"},[s._v('"cool"')]),s._v(";\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" another = ["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("];\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("doSomething")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{ \n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( something );\n  }\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("doAnother")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( another.join( "),t("span",{staticClass:"hljs-string"},[s._v('" ! "')]),s._v(" ) );\n  }\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("doSomething")]),s._v(": doSomething,\n\t  "),t("span",{staticClass:"hljs-attr"},[s._v("doAnother")]),s._v(": doAnother\n  }; \n}\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" foo = CoolModule(); \n\nfoo.doSomething(); "),t("span",{staticClass:"hljs-comment"},[s._v("// cool")]),s._v("\nfoo.doAnother(); "),t("span",{staticClass:"hljs-comment"},[s._v("// 1 ! 2 ! 3")]),s._v("\n")])])]),t("p",[s._v("首先我们对上面这段代码进成分行分析:\n私有数据变量: something, another"),t("br"),s._v("\n内部函数: doSomething, doAnother"),t("br"),s._v("\n直接说结论,上面这个例子就是模块模式.它return返回的这个对象也就是模块也被称为公共API(至少书中是这样称呼的).CoolModule()就是模块构造器或者叫模块函数.")]),s._v(" "),t("p",[s._v("注意:")]),s._v(" "),t("ul",[t("li",[s._v("这里的模块和我们所说的模块化开发不是完全一样的!")]),s._v(" "),t("li",[s._v("模块不一定非要是标准对象,也可以是一个函数,函数本质上也是对象,函数也可以有自己的属性.")]),s._v(" "),t("li",[s._v("书中有这样一句话CoolModule() 只是一个函数，必须要通过调用它来创建一个模块实例。如果不执行外部函数，内部作用域和闭包都无法被创建。我觉得这句话有必要延伸说一下.函数调用一次就会创建一个该函数的作用域(不调用就不会创建),包括创建它里面的变量和函数.")])]),s._v(" "),t("p",[s._v("模块模式:")]),s._v(" "),t("p",[s._v("模块模式需要具备以下2个条件:(这里结合上面的例子,对书中的定义进行说明方便理解)")]),s._v(" "),t("ol",[t("li",[s._v("必须有外部的封闭函数(即CoolModule)，该函数必须至少被调用一次(每次调用都会创建一个新的模块实例--\x3e模块实例指的就是函数return返回的对象)。")]),s._v(" "),t("li",[s._v("封闭函数(即CoolModule)必须返回至少一个内部函数(即doSomething, doAnother)，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态(即something, another)。")])]),s._v(" "),t("p",[s._v("模块:")]),s._v(" "),t("p",[s._v("表面上看由模块函数(例子中的CoolModule)所返回的对象就是模块.但模块还必须还包含模块函数的内部函数(即闭包函数).只有包含了才能真正称得上是模块.才强调一次这里的模块与模块化里的模块是有区别的,也不是nodejs里的模块.")]),s._v(" "),t("p",[s._v("模块函数:"),t("br"),s._v("\n模块函数也就是模块构造器,例子中的CoolModule().一般它有两个常见用法.")]),s._v(" "),t("ul",[t("li",[s._v("通过接受参数,对输出的模块进行修改.")]),s._v(" "),t("li",[s._v("通过添加模块里添加相关的内部函数,实现对输出模块数据的增删改查.(书中用命名将要作为公共API返回的对象.我觉得命名应该是用错了,应该是修改即增删改查更好)")])]),s._v(" "),t("h3",{attrs:{id:"现代的模块机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现代的模块机制"}},[s._v("#")]),s._v(" 现代的模块机制")]),s._v(" "),t("p",[s._v("大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。\n下面就介绍一个简单的模块管理器实现例子(对书中的例子进行逐行解读):")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-comment"},[s._v("//首先实例化我们的模块管理器,取名myModules")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" MyModules=("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("Manager")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//作为我们的模块池,保存所有定义的模块")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" modules={};\n\n  "),t("span",{staticClass:"hljs-comment"},[s._v("/**\n   *使用类似AMD的方式定义新模块，接收3个参数\n    *name:模块名\n    *deps:数组形式表示所依赖的其他模块\n    *impl:模块功能的实现\n  **/")]),s._v(" \n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("define")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("name,deps,impl")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-comment"},[s._v("//遍历依赖模块数组的每一项，从程序池中取出对应的模块,并赋值.")]),s._v("\n    "),t("span",{staticClass:"hljs-comment"},[s._v("//循环完后,deps由保存模块名的数组变成了保存对应模块的数组.")]),s._v("\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i="),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";i<deps.length;i++) {\n      deps[i]=modules[deps[i]];\n    }\n    "),t("span",{staticClass:"hljs-comment"},[s._v("//将新模块存储进模块池，并通过apply注入它所依赖的模块(即遍历后的deps,实际上就是用deps作为impl的入参)")]),s._v("\n    modules[name]=impl.apply(impl,deps);\n  }\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//从模块池中取出对应模块")]),s._v("\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("get")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("name")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" modules[name];\n  }\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//暴露定义模块和获取模块的两个api")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("define")]),s._v(": define,\n    "),t("span",{staticClass:"hljs-attr"},[s._v("get")]),s._v(": "),t("span",{staticClass:"hljs-keyword"},[s._v("get")]),s._v("\n  }\n})()\n")])])]),t("p",[s._v("说明:  后面书中说了这么一句"),t("code",[s._v("为了模块的定义引入了包装函数(可以传入任何依赖)")]),s._v(",这里包装函数指的是Manger(),同样也是我们上节提到的模块函数.首先说明下什么是包装函数.例如函数A当中还有一个函数B.当我们想要调用函数B的时候,则需要先调用函数A.那么函数A就叫做函数B的包装函数.也就是说我们想调用某个模块时,需要先调用它的包装函数即这里的Manger().接着是后面那句并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。注意这里的返回值是指impl的返回值.")]),s._v(" "),t("p",[s._v("接着看通过管理器来定义和使用模块")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[s._v("MyModules.define("),t("span",{staticClass:"hljs-string"},[s._v("'bar'")]),s._v(",[],"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("hello")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("who")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v('"Let me introduce: "')]),s._v(" + who;\n  }\n\t"),t("span",{staticClass:"hljs-comment"},[s._v("//返回公共API 即提供一个hello的接口")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("hello")]),s._v(":hello\n  };\n});\n\nMyModules.define("),t("span",{staticClass:"hljs-string"},[s._v("'foo'")]),s._v(",["),t("span",{staticClass:"hljs-string"},[s._v("'bar'")]),s._v("],"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("bar")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" hungry = "),t("span",{staticClass:"hljs-string"},[s._v('"hippo"')]),s._v(";\n\n  functin awesome () {\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//这里的bar为返回模块bar返回的公共API")]),s._v("\n      "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log( bar.hello( hungry ).toUpperCase() );\n  }\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//返回公共API 即提供一个awesome的接口")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" {\n      "),t("span",{staticClass:"hljs-attr"},[s._v("awesome")]),s._v(":awesome\n  }\n})\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" bar = MyModules.get("),t("span",{staticClass:"hljs-string"},[s._v("'bar'")]),s._v(");"),t("span",{staticClass:"hljs-comment"},[s._v("//通过管理器获取模块'bar'")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" foo = MyModules.get("),t("span",{staticClass:"hljs-string"},[s._v("'foo'")]),s._v(");"),t("span",{staticClass:"hljs-comment"},[s._v("//通过管理器获取模块'foo'")]),s._v("\n\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//调用模块bar的hello接口")]),s._v("\n  bar.hello( "),t("span",{staticClass:"hljs-string"},[s._v('"hippo"')]),s._v(" ) \n); "),t("span",{staticClass:"hljs-comment"},[s._v("// Let me introduce: hippo ")]),s._v("\n\n"),t("span",{staticClass:"hljs-comment"},[s._v("//调用模块foo的awesome接口")]),s._v("\nfoo.awesome(); "),t("span",{staticClass:"hljs-comment"},[s._v("// LET ME INTRODUCE: HIPPO")]),s._v("\n")])])]),t("p",[s._v("这节的主要内容还是了解现在是如何对模块进行一个规范处理.主要是两部分内容,一个是通过名称和依赖合理定义模块并储存.另一个则是通过名称对存储的模块的调用.其实还可以再增加一个删除模块的方法.")]),s._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("闭包:当函数可以记住并访问所在的词法作用域，并且函数是在当前词法作用域之外执行，这时 就产生了闭包。\n模块有两个主要特征:")]),s._v(" "),t("ul",[t("li",[s._v("为创建内部作用域而调用了一个包装函数(模块构造器的实例化,不想对频繁换名字吐槽了);")]),s._v(" "),t("li",[s._v("包装函数的返回值(也就是模块)必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。")])])])}),[],!1,null,null,null);a.default=l.exports}}]);