(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{400:function(s,a,t){"use strict";t.r(a);var n=t(16),l=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本 由于接口不兼容而不能工作的两个软件实体可以一起工作。")])]),s._v(" "),t("h2",{attrs:{id:"案例：地图渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例：地图渲染"}},[s._v("#")]),s._v(" 案例：地图渲染")]),s._v(" "),t("p",[s._v("使用谷歌地图和百度地图在页面展现地图")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" googleMap = { \n  "),t("span",{staticClass:"hljs-attr"},[s._v("show")]),s._v(": "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'开始渲染谷歌地图'")]),s._v("); \n  }\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" baiduMap = { \n  "),t("span",{staticClass:"hljs-attr"},[s._v("show")]),s._v(": "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'开始渲染百度地图'")]),s._v("); \n  }\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" renderMap = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("map")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (map.show "),t("span",{staticClass:"hljs-keyword"},[s._v("instanceof")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Function")]),s._v(") {\n    map.show(); \n  }\n}\n\nrenderMap(googleMap); "),t("span",{staticClass:"hljs-comment"},[s._v("// 输出:开始渲染谷歌地图")]),s._v("\nrenderMap(baiduMap); "),t("span",{staticClass:"hljs-comment"},[s._v("// 输出:开始渲染百度地图")]),s._v("\n")])])]),t("p",[s._v("这段程序得以顺利运行的关键是 "),t("code",[s._v("googleMap")]),s._v(" 和 "),t("code",[s._v("baiduMap")]),s._v(" 提供了一致的 "),t("code",[s._v("show")]),s._v(" 方法，但第三方的接口方法并不在我们自己的控制范围之内，假如 "),t("code",[s._v("baiduMap")]),s._v(" 提供的显示地图的方法不叫 show 而叫  "),t("code",[s._v("display")]),s._v(" 呢"),t("br"),s._v(" "),t("code",[s._v("baiduMap")]),s._v(" 这个对象来源于第三方，正常情况下我们都不应该去改动它。此时我们可以通过增加 "),t("code",[s._v("baiduMapAdapter")]),s._v(" 来解决问题")]),s._v(" "),t("div",{staticClass:"language-Javascript extra-class"},[t("pre",[t("code",{staticClass:"language-Javascript"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" googleMap = { \n  "),t("span",{staticClass:"hljs-attr"},[s._v("show")]),s._v(": "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'开始渲染谷歌地图'")]),s._v("); \n  }\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" baiduMap = {\n  "),t("span",{staticClass:"hljs-attr"},[s._v("display")]),s._v(": "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'开始渲染百度地图'")]),s._v("); \n  }\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" baiduMapAdapter = { \n  "),t("span",{staticClass:"hljs-attr"},[s._v("show")]),s._v(": "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" baiduMap.display();\n  }\n};\nrenderMap(googleMap); "),t("span",{staticClass:"hljs-comment"},[s._v("// 输出:开始渲染谷歌地图")]),s._v("\nrenderMap(baiduMapAdapter); "),t("span",{staticClass:"hljs-comment"},[s._v("// 输出:开始渲染百度地图")]),s._v("\n")])])]),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来可能会如何演化。适配器模式不需要改变已有的接口，就能够使它们协同作用。\n装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象 增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。\n外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。")])])}),[],!1,null,null,null);a.default=l.exports}}]);