(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{380:function(t,s,a){"use strict";a.r(s);var e=a(16),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"fiber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" Fiber")]),t._v(" "),a("h2",{attrs:{id:"react16之前的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react16之前的问题"}},[t._v("#")]),t._v(" react16之前的问题")]),t._v(" "),a("p",[t._v("react从状态变化到ui变化分为两步")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("协调阶段 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/reconciliation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("reconciler"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("React 会自顶向下通过递归，遍历新数据生成新的 Virtual DOM，然后通过 Diff 算法，找到需要变更的元素(Patch)，放到更新队列里面去。")])]),t._v(" "),a("li",[a("p",[t._v("渲染阶段 render")])])]),t._v(" "),a("p",[t._v("遍历操作DOM更新队列，通过调用宿主环境的API，实际更新渲染对应元素")]),t._v(" "),a("p",[t._v("在协调阶段阶段，由于是采用的递归的遍历方式，这种也被成为 Stack Reconciler。这种方式有一个特点：一旦任务开始进行，就无法中断，那么js将一直占用主线程， 一直要等到整棵 Virtual DOM 树计算完成之后，才会把执行权交给渲染线程，那么这就会导致一些用户交互、动画等任务无法立即得到处理，就会有卡顿，非常的影响用户体验。")]),t._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("p",[t._v("合作式调度")]),t._v(" "),a("p",[t._v("把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行。")]),t._v(" "),a("p",[t._v("合作式调度主要就是用来分配任务的，当有更新任务来的时候，不会马上去做 Diff 操作，而是先把当前的更新送入一个 Update Queue 中，然后交给 Scheduler 去调度，Scheduler 会根据当前主线程的使用情况去处理这次 Update。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/6/26/16b9161aa82b235f?imageslim",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"什么是fiber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是fiber"}},[t._v("#")]),t._v(" 什么是Fiber")]),t._v(" "),a("p",[t._v("一种可中断的调用任务的解决方案，它的特性如下:")]),t._v(" "),a("ul",[a("li",[t._v("增量渲染(把渲染任务拆分成块，匀到多帧)")]),t._v(" "),a("li",[t._v("更新时能够暂停，终止，复用渲染任务")]),t._v(" "),a("li",[t._v("给不同类型的更新赋予优先级")]),t._v(" "),a("li",[t._v("并发方面新的基础能力")])]),t._v(" "),a("h2",{attrs:{id:"fiber是如何工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber是如何工作的"}},[t._v("#")]),t._v(" Fiber是如何工作的")]),t._v(" "),a("ol",[a("li",[t._v("ReactDOM.render() 和 setState 的时候开始创建更新。")]),t._v(" "),a("li",[t._v("将创建的更新加入任务队列，等待调度。")]),t._v(" "),a("li",[t._v("在 requestIdleCallback 空闲时执行任务。")]),t._v(" "),a("li",[t._v("从根节点开始遍历 Fiber Node，并且构建 WokeInProgress Tree。")]),t._v(" "),a("li",[t._v("生成 effectList。")]),t._v(" "),a("li",[t._v("根据 EffectList 更新 DOM。")])]),t._v(" "),a("h2",{attrs:{id:"创建更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建更新"}},[t._v("#")]),t._v(" 创建更新")]),t._v(" "),a("p",[t._v("创建更新的过程可以归纳为以下几步")]),t._v(" "),a("p",[t._v("（1）获取节点对应的fiber对象\n（2）计算currentTime\n（3）根据（1）fiber和（2）currentTime计算fiber对象的expirationTime\n（4）根据（3）expirationTime创建update对象\n（5）将setState中要更新的对象赋值到（4）update.payload，ReactDOM.render是{element}\n（6）将callback赋值到（4）update.callback\n（7）update入队updateQueue\n（8）进行任务调度")]),t._v(" "),a("h3",{attrs:{id:"fiber-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-node"}},[t._v("#")]),t._v(" Fiber Node")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[t._v("{\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 标记 Fiber 类型, 例如函数组件、类组件、宿主组件")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("tag")]),t._v(": WorkTag,\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 节点元素类型, 是具体的类组件、函数组件、宿主组件(字符串)，如div span")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("type")]),t._v(": any,\n  \n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 节点状态")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 对于宿主组件，这里保存宿主组件的实例, 例如DOM节点。")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 对于类组件来说，这里保存类组件的实例")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 对于函数组件说，这里为空，因为函数组件没有实例")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("stateNode")]),t._v(": any,\n    \n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 单链表树结构")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("return")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(","),a("span",{staticClass:"hljs-comment"},[t._v("// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回，同时也是处理完成后返回结果所需要合并的目标")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("child")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(","),a("span",{staticClass:"hljs-comment"},[t._v("// 指向自己的第一个子节点")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("sibling")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(",  "),a("span",{staticClass:"hljs-comment"},[t._v("// 指向自己的兄弟结构，兄弟节点的return指向同一个父节点")]),t._v("\n\t\n  "),a("span",{staticClass:"hljs-attr"},[t._v("key")]),t._v(": "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(" | string,\n  \n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 更新相关")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("pendingProps")]),t._v(": any,  "),a("span",{staticClass:"hljs-comment"},[t._v("// 新的变动带来的新的props")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("memoizedProps")]),t._v(": any,  "),a("span",{staticClass:"hljs-comment"},[t._v("// 上一次渲染完成之后的props")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("updateQueue")]),t._v(": UpdateQueue<any> | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(",  "),a("span",{staticClass:"hljs-comment"},[t._v("// 该Fiber对应的组件产生的Update会存放在这个队列里面")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("memoizedState")]),t._v(": any, "),a("span",{staticClass:"hljs-comment"},[t._v("// 上一次渲染的时候的state")]),t._v("\n    \n  "),a("span",{staticClass:"hljs-comment"},[t._v("// Scheduler 相关")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("expirationTime")]),t._v(": ExpirationTime,  "),a("span",{staticClass:"hljs-comment"},[t._v("// 代表任务在未来的哪个时间点应该被完成，不包括他的子树产生的任务")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 快速确定子树中是否有不在等待的变化")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("childExpirationTime")]),t._v(": ExpirationTime,\n    \n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 替身")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// React 在 Reconciliation 过程中会构建一颗新的树(官方称为workInProgress tree，WIP树)，可以认为是    一颗表示当前工作进度的树。还有一颗表示已渲染界面的旧树，React就是一边和旧树比对，一边构建WIP树的。 alternate 指向旧树的同等节点。")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("alternate")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(",\n\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 副作用相关的")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("effectTag")]),t._v(": SideEffectTag, "),a("span",{staticClass:"hljs-comment"},[t._v("// 用来记录Side Effect")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("nextEffect")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(", "),a("span",{staticClass:"hljs-comment"},[t._v("// 单链表用来快速查找下一个side effect")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("firstEffect")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(",  "),a("span",{staticClass:"hljs-comment"},[t._v("// 子树中第一个side effect")]),t._v("\n  "),a("span",{staticClass:"hljs-attr"},[t._v("lastEffect")]),t._v(": Fiber | "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v(", "),a("span",{staticClass:"hljs-comment"},[t._v("// 子树中最后一个side effect")]),t._v("\n  ....\n};\n")])])]),a("h2",{attrs:{id:"调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度"}},[t._v("#")]),t._v(" 调度")]),t._v(" "),a("p",[t._v("调度主要做3件事情")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1. 维护时间片\n2. 模拟浏览器 requestldleCallback API\n3. 调度列表和超时判断\n")])])]),a("p",[t._v("调度过程决定了下一个工作单元是什么")]),t._v(" "),a("h3",{attrs:{id:"优先级策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级策略"}},[t._v("#")]),t._v(" 优先级策略")]),t._v(" "),a("p",[t._v("每个工作单元运行时有6种优先级")]),t._v(" "),a("ul",[a("li",[t._v("synchronous 与之前的stack reconciler操作一样，同步执行")]),t._v(" "),a("li",[t._v("task 在next tick之前执行")]),t._v(" "),a("li",[t._v("Animation 下一帧之前执行")]),t._v(" "),a("li",[t._v("high 在不久的将来执行")]),t._v(" "),a("li",[t._v("Low 稍微延迟（100～200ms）执行也没关系")]),t._v(" "),a("li",[t._v("Offscreen 下一次render时或scroll时执行")])]),t._v(" "),a("p",[t._v("synchronous首屏（首次渲染）用，要求尽量快，不管会不会阻塞UI线程。")]),t._v(" "),a("p",[t._v("animation通过"),a("code",[t._v("requestAnimationFrame")]),t._v("来调度，这样在下一帧就能立即开始动画过程；")]),t._v(" "),a("p",[t._v("后3个都是由"),a("code",[t._v("requestIdleCallback")]),t._v("回调执行的；")]),t._v(" "),a("p",[t._v("offscreen指的是当前隐藏的、屏幕外的（看不见的）元素")]),t._v(" "),a("p",[t._v("高优先级的比如键盘输入（希望立即得到反馈），低优先级的比如网络请求，让评论显示出来等等。另外，紧急的事件允许插队")]),t._v(" "),a("p",[t._v("这样的优先级机制存在2个问题")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",[a("code",{staticClass:"language-html"},[t._v("1. 生命周期函数怎么执行（可能被频频中断）：触发顺序、次数没有保证了\n2. starvation（低优先级饿死）：如果高优先级任务很多，那么低优先级任务根本没机会执行就饿死了   \n")])])]),a("h2",{attrs:{id:"更新流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新流程"}},[t._v("#")]),t._v(" 更新流程")]),t._v(" "),a("p",[t._v("Reconciler 更新过程分为2步")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("（可中断）render/reconciliation 通过构造 WorkInProgress Tree 得出 Change。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("（不可中断）commit 应用这些DOM change。")])])])]),t._v(" "),a("p",[t._v("更新过程中会维护一个WorkingInProgress tree(WIP)，WIP树就是一个缓冲，它在Reconciliation 完毕后一次性提交给浏览器进行渲染。它可以减少内存分配和垃圾回收, 另外一个重要的场景就是异常的处理，比如当一个节点抛出异常，仍然可以继续沿用旧树的节点，避免整棵树挂掉。你可以将 WIP 树想象成从旧树中 Fork 出来的功能分支，你在这新分支中添加或移除特性，即使是操作失误也不会影响旧的分支。当你这个分支经过了测试和完善，就可以合并到旧分支，将其替换掉. 这或许就是’提交(commit)阶段‘的提交一词的来源吧。")]),t._v(" "),a("h3",{attrs:{id:"reconciliation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reconciliation"}},[t._v("#")]),t._v(" reconciliation")]),t._v(" "),a("p",[t._v("Reconciliation的过程可以理解为创建WorkingInProgress tree的过程，具体过程如下")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",[a("code",{staticClass:"language-html"},[t._v("\t1. 如果当前节点不需要更新，直接把子节点clone过来，跳到5。需要更新的话打个tag\n  2. 更新当前节点状态（props，state，context等）\n  3. 调用shouldComponentUpdate()，返回false的话，跳到5\n  4. 调用render()获取新的子节点，并为子节点创建Fiber (diff过程)\n  5. 如果没有产生child fiber, 工作单元结束，把effect list归并到return(一般为父节点)，并把当前节点的sibling作为下一个工作单元；否则把child作为下一个工作单元\n  6. 检查是否还有剩余时间，如果没有剩余可用时间了，等到下一次主线程空闲时才开始下一个工作单元；否则立即开始下一个\n  7. 如果没有下一个工作单元了(回到了workInProgress tree的跟节点)，Reconciliation阶段结束，进入pendingCommit状态\n")])])]),a("p",[t._v("1～6是循环执行，7是出口。每次处理一个 Fiber，每次循环做完了看看有没有剩余时间。循环结束时，workInProgress tree的根节点身上的effect list就是收集到的所有side effect，因为每做完一个都向上归并。")]),t._v(" "),a("p",[t._v("reconciliation阶段会执行如下生命周期")]),t._v(" "),a("ul",[a("li",[t._v("constructor")]),t._v(" "),a("li",[t._v("componentWillMount 废弃")]),t._v(" "),a("li",[t._v("componentWillReceiveProps 废弃")]),t._v(" "),a("li",[t._v("static getDerivedStateFromProps")]),t._v(" "),a("li",[t._v("shouldComponentUpdate")]),t._v(" "),a("li",[t._v("componentWillUpdate 废弃")]),t._v(" "),a("li",[t._v("render")])]),t._v(" "),a("p",[t._v("由于 reconciliation 阶段是可中断的，一旦中断之后恢复的时候又会重新执行，所以很可能 reconciliation 阶段的生命周期方法会被多次调用，所以在 reconciliation 阶段的生命周期的方法是不稳定的，这也是 React 为什么要废弃 componentWillMount 和 componentWillReceiveProps方法而改为静态方法 getDerivedStateFromProps 的原因")]),t._v(" "),a("h3",{attrs:{id:"commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" Commit")]),t._v(" "),a("p",[t._v("commit 阶段可以理解为就是将 Diff 的结果反映到真实 DOM 的过程。")]),t._v(" "),a("p",[t._v("在 commit 阶段，在 commitRoot 里会根据 effect的 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/504576306461a5ff339dc99691842f0f35a8bf4c/packages/shared/ReactSideEffectTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("effectTag"),a("OutboundLink")],1),t._v(" ，进行对应的插入、更新、删除操作，根据 tag 不同，调用不同的更新方法。")]),t._v(" "),a("p",[t._v("commit阶段调用生命周期")]),t._v(" "),a("ul",[a("li",[t._v("getSnapshotBeforeUpdate()")]),t._v(" "),a("li",[t._v("componentDidMount")]),t._v(" "),a("li",[t._v("componentDidUpdate")]),t._v(" "),a("li",[t._v("componentWillUnmount")])]),t._v(" "),a("p",[t._v("commit过程同步执行，不可中断。分为2步")]),t._v(" "),a("ol",[a("li",[t._v("丢弃原始fiber tree，将workInProgress tree作为新的fiber tree")]),t._v(" "),a("li",[t._v("将更新commit到DOM树上")])]),t._v(" "),a("p",[t._v("commit阶段的工作量比较大，所以尽量不要在此阶段的生命周期函数中做大量操作(操作DOM等)")]),t._v(" "),a("h2",{attrs:{id:"遍历方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历方式"}},[t._v("#")]),t._v(" 遍历方式")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[a("span",{staticClass:"hljs-comment"},[t._v("/**\n * "),a("span",{staticClass:"hljs-doctag"},[t._v("@params ")]),t._v("fiber 当前需要处理的节点\n * "),a("span",{staticClass:"hljs-doctag"},[t._v("@params ")]),t._v("topWork 本次更新的根节点\n */")]),t._v("\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("performUnitOfWork")]),t._v("("),a("span",{staticClass:"hljs-params"},[t._v("fiber: Fiber, topWork: Fiber")]),t._v(") ")]),t._v("{\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 对该节点进行处理")]),t._v("\n  beginWork(fiber);\n\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 如果存在子节点，那么下一个待处理的就是子节点")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (fiber.child) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fiber.child;\n  }\n\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 没有子节点了，上溯查找兄弟节点")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("let")]),t._v(" temp = fiber;\n  \n  "),a("span",{staticClass:"hljs-keyword"},[t._v("while")]),t._v(" (temp) {\n    completeWork(temp);\n\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 到顶层节点了, 退出")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (temp === topWork) {\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("break")]),t._v("\n    }\n\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 找到下一个要处理的兄弟节点")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (temp.sibling) {\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" temp.sibling;\n    }\n\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 没有, 继续上溯")]),t._v("\n    temp = temp.return;\n  }\n}\n")])])]),a("h2",{attrs:{id:"图解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解"}},[t._v("#")]),t._v(" 图解")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",[a("code",{staticClass:"language-react"},[t._v("import React from 'react';\nimport ReactDOM from 'react-dom'\n\nclass List extends React.Component {\n  render () {\n    return (\n      [1,2,3].map((item)=>{\n        return <span>span</span>\n      })\n    )\n  }\n}\n\nclass App extends React.Component {\n    render () {\n      return (\n        [<button>按钮</button>,<List/>,<div>div</div>]\n      );\n    }\n}\nReactDOM.render(\n <App />,\n document.getElementById(\"root\")\n)\n")])])]),a("h3",{attrs:{id:"初次渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初次渲染"}},[t._v("#")]),t._v(" 初次渲染")]),t._v(" "),a("ol",[a("li",[t._v("创建一个RootFiber节点")])]),t._v(" "),a("p",[t._v("![image-20200103171701313](/Users/liushen/Library/Application Support/typora-user-images/image-20200103171701313.png)")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("沿着子节点不断的创建fiber子节点，如果发现子节点是一个数组，会把子节点都创建好，之后拿到第一个子节点再往下走。")])]),t._v(" "),a("p",[t._v("遍历顺序为: App -> App -> button -> list -> span1 -> span2 -> span3 -> div")]),t._v(" "),a("p",[t._v("![image-20200103172231514](/Users/liushen/Library/Application Support/typora-user-images/image-20200103172231514.png)")]),t._v(" "),a("p",[t._v("初次渲染也可以看作一个更新的过程，只不过每次更新都是创建一个新节点。")]),t._v(" "),a("h3",{attrs:{id:"更新fiber-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新fiber-tree"}},[t._v("#")]),t._v(" 更新Fiber Tree")]),t._v(" "),a("div",{staticClass:"language-react extra-class"},[a("pre",[a("code",{staticClass:"language-react"},[t._v("import React from 'react';\nimport ReactDOM from 'react-dom'\n\nclass List extends React.Component {\n  render () {\n    const { list } = this.props;\n    return (\n      list.map((item)=>{\n        return <span>{item}</span>\n      })\n    )\n  }\n}\n\nclass App extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        list:[1,2,3]\n      }\n    }\n    clickButton = () => {\n      this.setState({\n        list:[1,4,3]\n      })\n    }\n    render () {\n      return (\n        [<button onClick={this.clickButton}>按钮</button>,<List list={this.state.list}/>,<div>div</div>]\n      );\n    }\n}\nReactDOM.render(\n <App />,\n document.getElementById(\"root\")\n)\n")])])]),a("p",[t._v("点击按钮，更新span2")]),t._v(" "),a("p",[t._v("当遍历到span2节点时候，发现span2节点是需要更新的，因为它身上有个叫effectTag的标志，值为4表示的是要更新本节点。这个节点需要更新所以把span2节点记录在父节点的firstEffect链表上")]),t._v(" "),a("p",[t._v("![image-20200105233724980](/Users/liushen/Library/Application Support/typora-user-images/image-20200105233724980.png)")]),t._v(" "),a("p",[t._v("当遍历到list节点的时候，因为它身上firstEffect不为空，所以它会把他身上的firstEffect接到父节点的身上")]),t._v(" "),a("p",[t._v("![image-20200105233800945](/Users/liushen/Library/Application Support/typora-user-images/image-20200105233800945.png)")]),t._v(" "),a("p",[t._v("遍历至app节点时")]),t._v(" "),a("p",[t._v("![image-20200105233834477](/Users/liushen/Library/Application Support/typora-user-images/image-20200105233834477.png)")]),t._v(" "),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("问题")]),t._v(" "),a("p",[t._v("React在一些响应体验要求较高的场景不适用，比如动画，布局和手势，根本原因是渲染/更新过程一旦开始无法中断，持续占用主线程，主线程忙于执行JS，无暇他顾（布局、动画），造成掉帧、延迟响应（甚至无响应）等不佳体验")])]),t._v(" "),a("li",[a("p",[t._v("解决方案")]),t._v(" "),a("p",[t._v("把diff过程拆分为小块任务，通过合理的调度机制来控制时间（更细粒度、更强的控制力）")])]),t._v(" "),a("li",[a("p",[t._v("什么能拆，什么不能拆")]),t._v(" "),a("p",[t._v("渲染/更新过程分为2个阶段")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("diff ~ render/reconciliation")])]),t._v(" "),a("li",[a("p",[t._v("patch ~ commit")])])]),t._v(" "),a("p",[t._v("diff的实际工作是对比 prevInstance 和 nextInstance 的状态，找出差异及其对应的DOM change。diff本质上是一些计算（遍历、比较），是可拆分的（算一半待会儿接着算）")]),t._v(" "),a("p",[t._v("patch阶段把本次更新中的所有DOM change应用到DOM树，是一连串的DOM操作。这些DOM操作虽然看起来也可以拆分（按照change list一段一段做），但这样做一方面可能造成DOM实际状态与维护的内部状态不一致，另外还会影响体验。而且，一般场景下，DOM更新的耗时比起diff及生命周期函数耗时不算什么，拆分的意义不很大")])]),t._v(" "),a("li",[a("p",[t._v("怎么拆")]),t._v(" "),a("p",[t._v("Fiber的拆分单位是fiber（fiber tree上的一个节点），实际上就是按虚拟DOM节点拆，因为fiber tree是根据vDOM tree构造出来的，树结构一模一样，只是节点携带的信息有差异。")]),t._v(" "),a("p",[t._v("以fiber为工作单元，每个组件实例和每个DOM节点抽象表示的实例都是一个工作单元。工作循环中，每次处理一个fiber，处理完可以中断/挂起整个工作循环")])]),t._v(" "),a("li",[a("p",[t._v("如何调度任务")]),t._v(" "),a("ol",[a("li",[t._v("工作循环")]),t._v(" "),a("li",[t._v("优先级机制")])]),t._v(" "),a("p",[t._v("工作循环是基本的任务调度机制，工作循环中每次处理一个任务（工作单元），处理完毕有一次喘息的机会。每个工作单元结束检查是否还有时间做下一个，没时间了就先“挂起”。")]),t._v(" "),a("p",[t._v("优先级机制用来处理突发事件与优化次序，例如：")]),t._v(" "),a("ul",[a("li",[t._v("到commit阶段了，提高优先级")]),t._v(" "),a("li",[t._v("高优任务做一半出错了，给降一下优先级")]),t._v(" "),a("li",[t._v("抽空关注一下低优任务，别给饿死了")]),t._v(" "),a("li",[t._v("如果对应DOM节点此刻不可见，给降到最低优先级")])]),t._v(" "),a("p",[t._v("这些策略用来动态调整任务调度，是工作循环的辅助机制，最先做最重要的事情")])]),t._v(" "),a("li",[a("p",[t._v("如何中断/恢复")]),t._v(" "),a("p",[t._v("中断：检查当前正在处理的工作单元，保存当前成果（"),a("code",[t._v("firstEffect, lastEffect")]),t._v("），修改tag标记一下，迅速收尾并再开一个"),a("code",[t._v("requestIdleCallback")]),t._v("，下次有机会再做")]),t._v(" "),a("p",[t._v("断点恢复：下次再处理到该工作单元时，看tag是被打断的任务，接着做未完成的部分或者重做")]),t._v(" "),a("p",[t._v("P.S.无论是时间用尽“自然”中断，还是被高优任务粗暴打断，对中断机制来说都一样")])]),t._v(" "),a("li",[a("p",[t._v("如何收集任务结果")]),t._v(" "),a("ol",[a("li",[t._v("找到根节点优先级最高的workInProgress tree，取其待处理的节点（代表组件或DOM节点）")]),t._v(" "),a("li",[t._v("检查当前节点是否需要更新，不需要的话，直接到4")]),t._v(" "),a("li",[t._v("标记一下（打个tag），更新自己（组件更新"),a("code",[t._v("props")]),t._v("，"),a("code",[t._v("context")]),t._v("等，DOM节点记下DOM change），并为孩子生成workInProgress node")]),t._v(" "),a("li",[t._v("如果没有产生子节点，归并effect list（包含DOM change）到父级")]),t._v(" "),a("li",[t._v("把孩子或兄弟作为待处理节点，准备进入下一个工作循环。如果没有待处理节点（回到了workInProgress tree的根节点），工作循环结束")])]),t._v(" "),a("p",[t._v("通过每个节点更新结束时 向上归并effect list 来收集任务结果，reconciliation结束后，根节点的effect list里记录了包括DOM change在内的所有side effect")])])]),t._v(" "),a("h1",{attrs:{id:"未来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未来"}},[t._v("#")]),t._v(" 未来")]),t._v(" "),a("p",[t._v("拆分任务，并行执行 (Fiber reconciler + web worker)。react已经做好准备了，期待react 17")])])}),[],!1,null,null,null);s.default=n.exports}}]);