(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{447:function(e,s,t){"use strict";t.r(s);var n=t(16),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#diff"}},[e._v("#")]),e._v(" diff")]),e._v(" "),t("h2",{attrs:{id:"react16之前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react16之前"}},[e._v("#")]),e._v(" react16之前")]),e._v(" "),t("p",[e._v("Virtual DOM Tree 。 树状结构，深度优先遍历，递归  "),t("a",{attrs:{href:"https://react.docschina.org/docs/reconciliation.html#the-diffing-algorithm",target:"_blank",rel:"noopener noreferrer"}},[e._v("diff"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("##react16之后")]),e._v(" "),t("p",[e._v("Fiber架构，链表结构，增量更新。")]),e._v(" "),t("p",[e._v("###TextNode")]),e._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",[t("code",{staticClass:"language-react"},[e._v("// demo1：当前 ui 对应的节点的 jsx\nreturn (\n  <div>\n    <xxx></xxx>\n    <aaa></aaa>\n  </div>\n)\n\n// demo2：更新成功后的节点对应的 jsx\nreturn (\n  <div>\n    新的文本\n  </div>\n)\n")])])]),t("p",[e._v("对应的单链表结构")]),e._v(" "),t("p",[e._v("![image-20191231025001782](/Users/liushen/Library/Application Support/typora-user-images/image-20191231025001782.png)")]),e._v(" "),t("p",[e._v("新的Fiber Node为textNode情况下，调用reconcileSingleTextNode方法对比。")]),e._v(" "),t("p",[e._v("原对应节点xxx有两种情况")]),e._v(" "),t("ol",[t("li",[e._v("xxx是textNode")]),e._v(" "),t("li",[e._v("xxx不是textNode")])]),e._v(" "),t("h4",{attrs:{id:"xxx是textnode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xxx是textnode"}},[e._v("#")]),e._v(" xxx是textNode")]),e._v(" "),t("p",[e._v("原节点也是textNode，复用原节点(xxx)，删除剩余节点(aaa)")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (currentFirstChild !== "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(" && currentFirstChild.tag === HostText) {\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// We already have an existing node so let's just update it and delete")]),e._v("\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// the rest.")]),e._v("\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// 删除剩余节点，从当前层的第一个元素右边的元素开始")]),e._v("\n  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// 复用当前节点")]),e._v("\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" existing = useFiber(currentFirstChild, textContent, expirationTime);\n  existing.return = returnFiber;\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" existing;\n}\n")])])]),t("h4",{attrs:{id:"xxx不是textnode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xxx不是textnode"}},[e._v("#")]),e._v(" xxx不是textNode")]),e._v(" "),t("p",[e._v("原节点不是textNode，无法复用，删除原节点(xxx和aaa)")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-comment"},[e._v("// 删除原节点,从当前层的第一个节点开始")]),e._v("\ndeleteRemainingChildren(returnFiber, currentFirstChild);\n"),t("span",{staticClass:"hljs-comment"},[e._v("// 新的节点是文本节点，需要创建一个")]),e._v("\n"),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" created = createFiberFromText(\n  textContent,\n  returnFiber.mode,\n  expirationTime,\n);\ncreated.return = returnFiber;\n")])])]),t("blockquote",[t("p",[e._v("注意：删除节点不会真的从链表里面把节点删除，只是打一个 delete 的 tag，当 commit 的时候才会真正的去删除。")])]),e._v(" "),t("h3",{attrs:{id:"react-element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-element"}},[e._v("#")]),e._v(" React Element")]),e._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",[t("code",{staticClass:"language-react"},[e._v("// demo1：当前 ui 对应的节点的 jsx\nreturn (\n  <div>\n    <xxx></xxx>\n    <AAA></AAA>\n  </div>\n)\n\n// demo2：更新成功后的节点对应的 jsx\nreturn (\n  <div>\n    <AAA></AAA>\n  </div>\n)\n")])])]),t("p",[e._v("对应的单链表结构")]),e._v(" "),t("p",[e._v("![image-20191231110701415](/Users/liushen/Library/Application Support/typora-user-images/image-20191231110701415.png)")]),e._v(" "),t("p",[e._v("新节点为一个Element节点，diff时先判断有没有节点可以复用(reconcileSingleElement方法)")]),e._v(" "),t("ol",[t("li",[e._v("key相同")]),e._v(" "),t("li",[e._v("节点类型相同")])]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (child.key === key) {\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (\n    child.tag === Fragment\n    ? element.type === REACT_FRAGMENT_TYPE\n    : child.elementType === element.type\n  ) {\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// 新的节点只有一个，删除原节点的兄弟节点")]),e._v("\n    deleteRemainingChildren(returnFiber, child.sibling);\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// 复用当前节点")]),e._v("\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" existing = useFiber(\n      child,\n      element.type === REACT_FRAGMENT_TYPE\n      ? element.props.children\n      : element.props,\n      expirationTime,\n    );\n    existing.ref = coerceRef(returnFiber, child, element);\n    existing.return = returnFiber;\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" existing;\n}\n")])])]),t("p",[e._v("从当前层的第一个节点开始对比，如果第一个节点不能复用，删除它，继续找它的sibling兄弟节点。如果没有一个匹配的，当前层所有的节点都会被删除。")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-comment"},[e._v("// 找到 key 相同的节点，就会复用当前节点")]),e._v("\n"),t("span",{staticClass:"hljs-keyword"},[e._v("while")]),e._v(" (child !== "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (child.key === key) {\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (\n      child.tag === Fragment\n      ? element.type === REACT_FRAGMENT_TYPE\n      : child.elementType === element.type\n    ) {\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// 复用节点逻辑相关代码")]),e._v("\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// code ...")]),e._v("\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" existing;\n    } "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n      deleteRemainingChildren(returnFiber, child);\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("break")]),e._v(";\n    }\n  } "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// 如果没有可以复用的节点，就把这个节点删除")]),e._v("\n    deleteChild(returnFiber, child);\n  }\n  child = child.sibling;\n}\n\n")])])]),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-comment"},[e._v("// 如果没有可以复用的节点，就创建新节点")]),e._v("\n"),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (element.type === REACT_FRAGMENT_TYPE) {\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" created = createFiberFromFragment(\n    element.props.children,\n    returnFiber.mode,\n    expirationTime,\n    element.key,\n  );\n  created.return = returnFiber;\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" created;\n} "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" created = createFiberFromElement(\n    element,\n    returnFiber.mode,\n    expirationTime,\n  );\n  created.ref = coerceRef(returnFiber, currentFirstChild, element);\n  created.return = returnFiber;\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" created;\n}\n")])])]),t("h3",{attrs:{id:"array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[e._v("#")]),e._v(" Array")]),e._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",[t("code",{staticClass:"language-react"},[e._v("// demo1：当前 ui 对应的节点的 jsx\nreturn (\n  <div>\n    <xxx></xxx>\n    <AAA></AAA>\n    <BBB></BBB>\n  </div>\n)\n\n// demo2：更新成功后的节点对应的 jsx\nreturn (\n  <div>\n    <xxx></xxx>\n    <AAA></AAA>\n    <CCC></CCC>\n    <DDD></DDD>\n  </div>\n)\n")])])]),t("p",[e._v("新旧节点有多个，循环对比diff。")]),e._v(" "),t("h4",{attrs:{id:"第一步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一步"}},[e._v("#")]),e._v(" 第一步")]),e._v(" "),t("p",[e._v("从头部遍历。第一次遍历新数组，新老index都++，比较新老数组哪些元素是一样的，（通过updateSlot，比较key），如果是同样的就update。")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[e._v("let")]),e._v(" oldFiber = currentFirstChild;\n"),t("span",{staticClass:"hljs-keyword"},[e._v("let")]),e._v(" lastPlacedIndex = "),t("span",{staticClass:"hljs-number"},[e._v("0")]),e._v(";\n"),t("span",{staticClass:"hljs-keyword"},[e._v("let")]),e._v(" newIdx = "),t("span",{staticClass:"hljs-number"},[e._v("0")]),e._v(";\n"),t("span",{staticClass:"hljs-keyword"},[e._v("let")]),e._v(" nextOldFiber = "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(";\n"),t("span",{staticClass:"hljs-keyword"},[e._v("for")]),e._v(" (; oldFiber !== "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(" && newIdx < newChildren.length; newIdx++) {\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (oldFiber.index > newIdx) {\n    nextOldFiber = oldFiber;\n    oldFiber = "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(";\n  } "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n    nextOldFiber = oldFiber.sibling;\n  }\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" newFiber = updateSlot(\n    returnFiber,\n    oldFiber,\n    newChildren[newIdx],\n    expirationTime,\n  );\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (newFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// "),t("span",{staticClass:"hljs-doctag"},[e._v("TODO:")]),e._v(" This breaks on empty slots like null children. That's")]),e._v("\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// unfortunate because it triggers the slow path all the time. We need")]),e._v("\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// a better way to communicate whether this was a miss or null,")]),e._v("\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// boolean, undefined, etc.")]),e._v("\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (oldFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n      oldFiber = nextOldFiber;\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("break")]),e._v(";\n  }\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (shouldTrackSideEffects) {\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (oldFiber && newFiber.alternate === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// We matched the slot, but we didn't reuse the existing fiber, so we")]),e._v("\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// need to delete the existing child.")]),e._v("\n    \tdeleteChild(returnFiber, oldFiber);\n    }\n  }\n  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n  "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (previousNewFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// "),t("span",{staticClass:"hljs-doctag"},[e._v("TODO:")]),e._v(" Move out of the loop. This only happens for the first run.")]),e._v("\n    resultingFirstChild = newFiber;\n  } "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// "),t("span",{staticClass:"hljs-doctag"},[e._v("TODO:")]),e._v(" Defer siblings if we're not at the right index for this slot.")]),e._v("\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// I.e. if we had null values before, then we want to defer this")]),e._v("\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// for each null value. However, we also don't want to call updateSlot")]),e._v("\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// with the previous one.")]),e._v("\n    previousNewFiber.sibling = newFiber;\n  }\n  previousNewFiber = newFiber;\n  oldFiber = nextOldFiber;\n}\n")])])]),t("h4",{attrs:{id:"第二步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二步"}},[e._v("#")]),e._v(" 第二步")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("新节点遍历完毕")]),e._v(" "),t("p",[e._v("新节点遍历完毕，一般是原数组删除了元素。遍历完成后把原链表当前层剩下的元素都删除")])]),e._v(" "),t("li",[t("p",[e._v("旧节点遍历完毕")]),e._v(" "),t("p",[e._v("旧节点遍历完毕，一般是原数组新增了元素。遍历完成后在新链表当前层新建Fiber节点")])])]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (newIdx === newChildren.length) {\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// We've reached the end of the new children. We can delete the rest.")]),e._v("\n      deleteRemainingChildren(returnFiber, oldFiber);\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" resultingFirstChild;\n    }\n\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (oldFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// If we don't have any more existing children we can choose a fast path")]),e._v("\n      "),t("span",{staticClass:"hljs-comment"},[e._v("// since the rest will all be insertions.")]),e._v("\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("for")]),e._v(" (; newIdx < newChildren.length; newIdx++) {\n        "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" newFiber = createChild(\n          returnFiber,\n          newChildren[newIdx],\n          expirationTime,\n        );\n        "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (newFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n          "),t("span",{staticClass:"hljs-keyword"},[e._v("continue")]),e._v(";\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (previousNewFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n          "),t("span",{staticClass:"hljs-comment"},[e._v("// "),t("span",{staticClass:"hljs-doctag"},[e._v("TODO:")]),e._v(" Move out of the loop. This only happens for the first run.")]),e._v("\n          resultingFirstChild = newFiber;\n        } "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("return")]),e._v(" resultingFirstChild;\n    }\n")])])]),t("p",[e._v("把所有老数组元素按 key 或者是 index 放 Map 里，然后遍历新数组，根据新数组的 key 或者 index 快速找到老数组里面是否有可复用的。")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-comment"},[e._v("// Add all children to a key map for quick lookups.")]),e._v("\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    "),t("span",{staticClass:"hljs-comment"},[e._v("// Keep scanning and use the map to restore deleted items as moves.")]),e._v("\n    "),t("span",{staticClass:"hljs-keyword"},[e._v("for")]),e._v(" (; newIdx < newChildren.length; newIdx++) {\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        expirationTime,\n      );\n      "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (newFiber !== "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n        "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (shouldTrackSideEffects) {\n          "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (newFiber.alternate !== "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n            "),t("span",{staticClass:"hljs-comment"},[e._v("// The new fiber is a work in progress, but if there exists a")]),e._v("\n            "),t("span",{staticClass:"hljs-comment"},[e._v("// current, that means that we reused the fiber. We need to delete")]),e._v("\n            "),t("span",{staticClass:"hljs-comment"},[e._v("// it from the child list so that we don't add it to the deletion")]),e._v("\n            "),t("span",{staticClass:"hljs-comment"},[e._v("// list.")]),e._v("\n            existingChildren.delete(\n              newFiber.key === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(" ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        "),t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (previousNewFiber === "),t("span",{staticClass:"hljs-literal"},[e._v("null")]),e._v(") {\n          resultingFirstChild = newFiber;\n        } "),t("span",{staticClass:"hljs-keyword"},[e._v("else")]),e._v(" {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n")])])]),t("p",[e._v("最后再删除没有被上述情况涉及的元素（也就是老数组中有新数组中无的元素）")]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[t("span",{staticClass:"hljs-keyword"},[e._v("if")]),e._v(" (shouldTrackSideEffects) {\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// Any existing children that weren't consumed above were deleted. We need")]),e._v("\n  "),t("span",{staticClass:"hljs-comment"},[e._v("// to add them to the deletion list.")]),e._v("\n  existingChildren.forEach("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[e._v("child")]),e._v(" =>")]),e._v(" deleteChild(returnFiber, child));\n}\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);