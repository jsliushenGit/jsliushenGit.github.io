(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{342:function(s,t,a){"use strict";a.r(t);var n=a(16),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("title: 数据结构javascript描述：单链表\nauthor: jsliushen\ntags:")]),s._v(" "),a("ul",[a("li",[s._v("数据结构\ncategories:")]),s._v(" "),a("li",[s._v("technology\ndate: 2017-12-02 22:54:00")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("要存储多个元素，我们通常会选择数组，通过[ ]很方便的访问元素。但是这种数据结构有个缺点：在大多数语言中，数组的大小是固定的，从数组的起点或中间插入或移除项的成本很高,因为需要移动其他项。对于这种需要多次进行插入或移除操作的场景，推荐使用链表这种数据结构。")]),s._v(" "),a("h3",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[s._v("#")]),s._v(" 链表")]),s._v(" "),a("p",[s._v("链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用组成。链表相对于数组的优势在于，插入或者移除元素时，只需要更改某一个项，不会对其他项产生影响。但是数组访问元素的方式更加便捷，直接使用[ ]，链表想要访问某一个元素时，需要从链表的第一个元素（表头）开始迭代直至找到需要的元素。在我们现实生活中，和链表比较相似的结构就是火车，火车由一节一节的车厢组成，每一个车厢之间都相互链接。如果想插入移除一节车厢时非常方便，只需要操作某一节车厢。"),a("br"),s._v("\n链表分为两种：单链表和双链表。单链表是指，每一项都只包含对于下一项的引用。而双链表中，除了包含对下一项的引用，还包含对上一项的引用。这篇文章我们只讨论单链表。")]),s._v(" "),a("h3",{attrs:{id:"创建链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建链表"}},[s._v("#")]),s._v(" 创建链表")]),s._v(" "),a("p",[s._v("了解的链表的特性之后，我们开始实现动手这种数据结构。"),a("br"),s._v("\n首先我们来实现链表的一项，它的特点是：有存储元素本身的节点和指向下一个元素的引用。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("Node")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("element")]),s._v(")")]),s._v("{\n      "),a("span",{staticClass:"hljs-comment"},[s._v("//存储当前元素")]),s._v("\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".element = element;\n      "),a("span",{staticClass:"hljs-comment"},[s._v("//存储对下一项的引用")]),s._v("\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".next="),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(";\n }\n")])])]),a("p",[s._v("链表中通常需要包含两个属性：表头head和链表长度length，以及若干方法：")]),s._v(" "),a("ul",[a("li",[s._v("append(element) 向链表的尾部添加一个元素")]),s._v(" "),a("li",[s._v("removeAt(position) 从链表的指定位置移除一项")]),s._v(" "),a("li",[s._v("insert(position,element) 向链表的指定位置插入一个元素")]),s._v(" "),a("li",[s._v("toString() 输出链表中元素的值")]),s._v(" "),a("li",[s._v("indexOf(element) 返回元素在链表中的索引，如果没有，则返回-1")]),s._v(" "),a("li",[s._v("remove(element) 从链表中移除某一项")]),s._v(" "),a("li",[s._v("isEmpty() 检测链表是不是空的，如果是，返回true，否则返回false")]),s._v(" "),a("li",[s._v("size() 返回链表中元素的个数")]),s._v(" "),a("li",[s._v("getHead() 返回链表的表头")])]),s._v(" "),a("p",[s._v("下面我们一个一个来实现这些方法。")]),s._v(" "),a("h4",{attrs:{id:"append"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#append"}},[s._v("#")]),s._v(" append")]),s._v(" "),a("p",[s._v("向链表的最后一项插入一个元素，那么首先应该找到链表的最后一项。寻找链表中某一项的方法是从表头开始，一直沿着next寻找下去。作为链表的最后一项，其next必定是null。所以我们只需要找到这一项，然后把它的next指向新增的元素即可。当然还有另外一种情况，当链表是空的时，往最后一项插入一个元素，相当于设置了链表的表头。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("  "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("LinkedList")]),s._v("("),a("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-comment"},[s._v("//链表中一项的构造函数")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" Node = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("element")]),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".element = element;\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".next = "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(";\n    }\n    "),a("span",{staticClass:"hljs-comment"},[s._v("//初始化表头为null")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" head = "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(";\n    "),a("span",{staticClass:"hljs-comment"},[s._v("//初始化链表长度为0")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" length = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".append = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("element")]),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//首先创建一个新的元素")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" node = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Node(element),\n            currentNode; "),a("span",{staticClass:"hljs-comment"},[s._v("//当前项，用来迭代寻找元素")]),s._v("\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//先判断链表是不是空的,即有没有表头")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (head === "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(") {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//如果没有表头，将添加的新元素设置为表头")]),s._v("\n            head = node;\n        } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//如果链表非空，需要找到最后一项")]),s._v("\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//先把当前项设置为表头，准备迭代")]),s._v("\n            currentNode = head;\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//只要当前项的next存在，就说明还有下一项")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (currentNode.next) {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//把当前项变为下一项，继续寻找，直至没有下一项了")]),s._v("\n                currentNode = currentNode.next;\n            }\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//循环结束时，currentNode.next已经没有了，说明此时currentNode就是最后一项")]),s._v("\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//将新的元素添加到最后一项的后面，即将currentNode.next指向新元素")]),s._v("\n            currentNode.next = node;\n        }\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//添加完成后，记得更新链表长度")]),s._v("\n        length++;\n    }\n}\n")])])]),a("p",[s._v("上面的代码有详细注释，说明了每一步的思路，大家可以对照查看，如果有问题，可以留言讨论。")]),s._v(" "),a("h4",{attrs:{id:"removeat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removeat"}},[s._v("#")]),s._v(" removeAt")]),s._v(" "),a("p",[s._v("从链表的指定位置移除元素。从链表中移除元素的思路很简单，大家可以类比火车拆除一节车厢。假设有A->B->C->D四节车厢，现在我想移除B车厢，首先需要断开B和A，C的链接装置，然后将A的连接装置链接到C。这时候火车就成了A->C->D,成功移除了B车厢。对应代码的思路为，首先找到指定位置对应的元素currentNode，得到它的上一项previousNode和下一项nextNode,然后将previousNode.next指向nextNode，这时候就相当于跳过了currentNode，把currentNode从链表中移除了。同样这里还有一种特殊情况，当position为0时，移除的元素是表头，没有上一项，这是我们只需要将表头head设置为下一项即可。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".removeAt = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("position")]),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//首先判断要移除的位置符不符合规定")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (position < "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" || position > length) {\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("throw")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"hljs-built_in"},[s._v("Error")]),s._v("("),a("span",{staticClass:"hljs-string"},[s._v('"索引超出范围"')]),s._v(");\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(";\n        } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//将当前元素初始化为表头，准备迭代")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" currentNode = head,\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//previousNode存储当前项的前一项，index存储当前项的索引")]),s._v("\n                previousNode, index = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//判断是不是要移除表头")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (position === "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(") {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//将表头设置为原表头的下一项即可")]),s._v("\n                head = currentNode.next;\n            } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//首先寻找到position对应的元素")]),s._v("\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//随着index的增加，当前项和上一项随之改变，index是当前项的索引")]),s._v("\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (index++ < position) {\n                    previousNode = currentNode;\n                    currentNode = currentNode.next;\n                }\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//循环结束时，index应该等于position,currentNode就是postion所对应的元素")]),s._v("\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//移除currentNode，只需要把previousNode的next指向currentNode的下一项即可")]),s._v("\n                previousNode.next = currentNode.next;\n            }\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//移除成功后，链表长度减1")]),s._v("\n        \tlength--;\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" currentNode.element;\n        }\n    }\n")])])]),a("p",[s._v("大家可以对照注释查看，思路不算复杂，应该很好理解。")]),s._v(" "),a("h4",{attrs:{id:"insert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insert"}},[s._v("#")]),s._v(" insert")]),s._v(" "),a("p",[s._v("向链表的指定位置插入一个元素。思路和removeAt一样，找到指定索引对应的元素currentNode和前一项previousNode。创建一个新元素node,然后将node添加到currentNode的前面，也就是把node.next指向currentNode，别忘了还要把前一项previousNode.next指向node。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".insert = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("position, element")]),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (position < "),a("span",{staticClass:"hljs-number"},[s._v("-1")]),s._v(" || position > length) {\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("throw")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"hljs-built_in"},[s._v("Error")]),s._v("("),a("span",{staticClass:"hljs-string"},[s._v('"索引超出范围"')]),s._v(");\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n        } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//创建新的元素")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" node = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Node(element);\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//将当前元素初始化为表头，准备迭代")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" currentNode = head,\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//previousNode存储当前项的前一项，index存储当前项的索引")]),s._v("\n                previousNode, index = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//判断是不是要往表头前面添加元素")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (position === "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(") {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//将新元素的next指向原表头，同时新元素变为新的表头")]),s._v("\n                node.next = currentNode;\n                head = node;\n            } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//首先寻找到position对应的元素")]),s._v("\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//随着index的增加，当前项和上一项随之改变，index是当前项的索引")]),s._v("\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (index++ < position) {\n                    previousNode = currentNode;\n                    currentNode = currentNode.next;\n                }\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//循环结束时，index应该等于position,currentNode就是postion所对应的元素")]),s._v("\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//将新元素插入到previousNode和currentNode之间")]),s._v("\n                previousNode.next = node;\n                node.next = currentNode;\n            }\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//插入成功后，链表长度加1")]),s._v("\n            length++;\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n        }\n    }\n")])])]),a("h4",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[s._v("#")]),s._v(" toString")]),s._v(" "),a("p",[s._v("将列表中的元素转化成字符串，只需要循环获取元素的element，然后使用字符串拼接起来")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".toString = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" currentNode = head,\n            str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(";\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (currentNode) {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//判断一下是否存在下一项，如果存在下一项，中间拼接逗号 ，否则不拼接")]),s._v("\n            str += currentNode.element + (currentNode.next ? "),a("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(" : "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(");\n            currentNode = currentNode.next;\n        }\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str;\n    }\n")])])]),a("h4",{attrs:{id:"indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexof"}},[s._v("#")]),s._v(" indexOf")]),s._v(" "),a("p",[s._v("寻找某一元素在链表中出现的位置，如果找不到这个元素，则返回-1。思路比较简单，只需要从表头开始迭代，一直到currentNode.next等于指定的元素，然后返回currentNode对应的索引。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".indexOf = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("element")]),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" currentNode = head,\n            index = "),a("span",{staticClass:"hljs-number"},[s._v("-1")]),s._v(";\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//一直循环至链表末尾")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (currentNode) {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("//链表中元素的值和指定的值相同时，返回对应的下标")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (currentNode.element === element) {\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//如果在循环中一直没有返回结果，说明没有找到匹配的值，返回-1")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-number"},[s._v("-1")]),s._v(";\n    }\n")])])]),a("h4",{attrs:{id:"remove"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[s._v("#")]),s._v(" remove")]),s._v(" "),a("p",[s._v("从链表中移除指定元素。可以借助前面实现的removeAt和indexof，找到指定元素在链表中的索引，然后根据索引使用removeAt来移除元素。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".remove = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("element")]),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" index = "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".indexOf(element);\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".removeAt(index);\n    }\n")])])]),a("h4",{attrs:{id:"isempty-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isempty-size"}},[s._v("#")]),s._v(" isEmpty,size")]),s._v(" "),a("p",[s._v("这两个方法都可以根据链表的长度length判断。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".isEmpty = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" length === "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".size = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" length;\n    }\n")])])]),a("h4",{attrs:{id:"gethead"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gethead"}},[s._v("#")]),s._v(" getHead")]),s._v(" "),a("p",[s._v("返回链表的表头，我们在链表中声明了head，这就是我们需要的表头。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("\t"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".getHead = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n    \t"),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" head;\n    }\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);