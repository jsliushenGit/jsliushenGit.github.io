(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{332:function(s,a,t){"use strict";t.r(a);var c=t(16),n=Object(c.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("title: javascript再出发：作用域链\nauthor: jsliushen\ntags:")]),s._v(" "),t("ul",[t("li",[s._v("javascript\ncategories:")]),s._v(" "),t("li",[s._v("technology\ndate: 2017-10-22 14:00:00")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("在函数的执行阶段，会创建函数的执行上下文，在上下文中有三个重要的属性，变量对象，作用域链和this。今天我们来讨论一下作用域链。在javascript引擎查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这个由多个执行上下文的变量对象构成的链表就叫作用域链。下面我们从函数的创建和执行阶段分别说明一下作用域链是如何创建和变化的。")]),s._v(" "),t("h3",{attrs:{id:"函数创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数创建"}},[s._v("#")]),s._v(" 函数创建")]),s._v(" "),t("p",[s._v("函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父执行上下文的变量对象到其中，你可以理解 [[scope]] 就是所有父执行上下文的变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链。\n举个例子：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\t"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("foo")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n      "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("bar")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n          ...\n      }\n\t}\n")])])]),t("p",[s._v("函数创建时，各自的[[scope]]为：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\tfoo.[[scope]] = [\n       globalContext.VO\n    ];\n\n    bar.[[scope]] = [\n       fooContext.AO,\n       globalContext.VO\n    ];\n")])])]),t("h3",{attrs:{id:"函数执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数执行"}},[s._v("#")]),s._v(" 函数执行")]),s._v(" "),t("p",[s._v("当函数执行时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。")]),s._v(" "),t("p",[s._v("这时候执行上下文的作用域链，我们命名为 Scope：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("Scope = [AO].concat([[Scope]]);\n")])])]),t("p",[s._v("至此，作用域链创建完毕。")]),s._v(" "),t("p",[s._v("以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\t"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" scope = "),t("span",{staticClass:"hljs-string"},[s._v('"global scope"')]),s._v(";\n\t"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("checkscope")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(")")]),s._v("{\n    \t"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" scope2 = "),t("span",{staticClass:"hljs-string"},[s._v("'local scope'")]),s._v(";\n    \t"),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" scope2;\n\t}\n\tcheckscope();\n")])])]),t("p",[s._v("执行过程如下：")]),s._v(" "),t("p",[s._v("1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\tcheckscope.[[scope]] = [\n    \tglobalContext.VO\n\t];\n")])])]),t("p",[s._v("2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\tECStack = [\n    \tcheckscopeContext,\n    \tglobalContext\n\t];\n")])])]),t("p",[s._v("3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\tcheckscopeContext = {\n    \t"),t("span",{staticClass:"hljs-attr"},[s._v("Scope")]),s._v(": checkscope.[[scope]],\n\t}\n")])])]),t("p",[s._v("4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("\tcheckscopeContext = {\n      "),t("span",{staticClass:"hljs-attr"},[s._v("AO")]),s._v(": {\n          "),t("span",{staticClass:"hljs-attr"},[s._v("arguments")]),s._v(": {\n              "),t("span",{staticClass:"hljs-attr"},[s._v("length")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n          },\n          "),t("span",{staticClass:"hljs-attr"},[s._v("scope2")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v("\n      }\n\t}\n")])])]),t("p",[s._v("5.第三步：将活动对象压入 checkscope 作用域链顶端")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("    checkscopeContext = {\n        "),t("span",{staticClass:"hljs-attr"},[s._v("AO")]),s._v(": {\n            "),t("span",{staticClass:"hljs-attr"},[s._v("arguments")]),s._v(": {\n                "),t("span",{staticClass:"hljs-attr"},[s._v("length")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n            },\n            "),t("span",{staticClass:"hljs-attr"},[s._v("scope2")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v("\n        },\n        "),t("span",{staticClass:"hljs-attr"},[s._v("Scope")]),s._v(": [AO, [[Scope]]]\n    }\n")])])]),t("p",[s._v("6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("    checkscopeContext = {\n        "),t("span",{staticClass:"hljs-attr"},[s._v("AO")]),s._v(": {\n            "),t("span",{staticClass:"hljs-attr"},[s._v("arguments")]),s._v(": {\n                "),t("span",{staticClass:"hljs-attr"},[s._v("length")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n            },\n            "),t("span",{staticClass:"hljs-attr"},[s._v("scope2")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v("'local scope'")]),s._v("\n        },\n        "),t("span",{staticClass:"hljs-attr"},[s._v("Scope")]),s._v(": [AO, [[Scope]]]\n    }\n")])])]),t("p",[s._v("7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",[t("code",{staticClass:"language-javascript"},[s._v("    ECStack = [\n        globalContext\n    ];\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);