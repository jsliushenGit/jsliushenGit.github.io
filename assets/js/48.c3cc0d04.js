(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{408:function(s,a,t){"use strict";t.r(a);var l=t(16),n=Object(l.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("面向对象设计鼓励将行为分布到各个对象中，把对象划分成更小的粒度，有助于增强对象的可复用性，但由于这些细粒度对象之间的联系激增，又有可能会反过来降低它们的可复用性。")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("定义")]),s._v(" "),t("p",[s._v("中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。")])]),s._v(" "),t("h2",{attrs:{id:"案例：泡泡堂游戏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例：泡泡堂游戏"}},[s._v("#")]),s._v(" 案例：泡泡堂游戏")]),s._v(" "),t("p",[s._v("玩家分为两队对战，如果己方队伍的队员全部死亡，则这局游戏失败，同时敌人队伍的所有玩家都取得胜利。")]),s._v(" "),t("h3",{attrs:{id:"一般思路实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一般思路实现"}},[s._v("#")]),s._v(" 一般思路实现")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" players = [];\n\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("Player")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("name, teamColor")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name = name; "),t("span",{staticClass:"hljs-comment"},[s._v("//玩家名字")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".teamColor = teamColor; "),t("span",{staticClass:"hljs-comment"},[s._v("//队伍颜色")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".partners = []; "),t("span",{staticClass:"hljs-comment"},[s._v("//队友")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".enemies = []; "),t("span",{staticClass:"hljs-comment"},[s._v("//敌人")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".state = "),t("span",{staticClass:"hljs-string"},[s._v('"live"')]),s._v("; "),t("span",{staticClass:"hljs-comment"},[s._v("//玩家状态")]),s._v("\n}\n\n"),t("span",{staticClass:"hljs-comment"},[s._v("//玩家团队胜利")]),s._v("\nPlayer.prototype.win = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"winner:"')]),s._v(" + "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name);\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("//玩家团队失败")]),s._v("\nPlayer.prototype.lose = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"loser:"')]),s._v(" + "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name);\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("//玩家死亡")]),s._v("\nPlayer.prototype.die = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" allDie = "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".state = "),t("span",{staticClass:"hljs-string"},[s._v('"dead"')]),s._v(";\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name + "),t("span",{staticClass:"hljs-string"},[s._v('"死亡"')]),s._v(");\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", partner; partner = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".partners[i++];) {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (partner.state === "),t("span",{staticClass:"hljs-string"},[s._v('"live"')]),s._v(") {\n      allDie = "),t("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n    }\n  }\n\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (allDie) {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".lose();\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", partner; partner = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".partners[i++];) {\n      partner.lose();\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", enemy; enemy = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".enemies[i++];) {\n      enemy.win();\n    }\n  }\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("//工厂模式创造玩家")]),s._v("\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("playerFactory")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("name, teamColor")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//创建一个玩家对象")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" newPlayer = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Player(name, teamColor);\n\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//遍历所有玩家，互相添加队友和对手")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", player; player = players[i++];) {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (player.teamColor === teamColor) {\n      player.partners.push(newPlayer);\n      newPlayer.partners.push(player);\n    } "),t("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n      player.enemies.push(newPlayer);\n      newPlayer.enemies.push(player);\n    }\n  }\n  "),t("span",{staticClass:"hljs-comment"},[s._v("//添加进所有玩家列表里")]),s._v("\n  players.push(newPlayer);\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(name + "),t("span",{staticClass:"hljs-string"},[s._v('"加入对战"')]),s._v(");\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" newPlayer;\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" player1 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家1"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"red"')]),s._v("),\n    player2 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家2"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"red"')]),s._v("),\n    player3 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家3"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"red"')]),s._v("),\n    player4 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家4"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"red"')]),s._v("),\n    player5 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家5"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"red"')]),s._v("),\n    player6 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家6"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"blue"')]),s._v("),\n    player7 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家7"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"blue"')]),s._v("),\n    player8 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家8"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"blue"')]),s._v("),\n    player9 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家9"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"blue"')]),s._v("),\n    player10 = playerFactory("),t("span",{staticClass:"hljs-string"},[s._v('"玩家10"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"blue"')]),s._v(");\n\nplayer1.die();\nplayer2.die();\nplayer3.die();\nplayer4.die();\nplayer5.die();\n")])])]),t("p",[s._v("以上代码实现可以随意的为游戏增加玩家或者队伍，但问题是，每个玩家和其他玩家都是紧耦合在一起的。每个玩家对象都有两个属性，this.partners和this.enemies，用来保存其他玩家对象的引用。当每个对象的状态发生改变，比如角色移动、吃到道具或者死亡时，都必须要显示地遍历通知其他玩家。")]),s._v(" "),t("h3",{attrs:{id:"中介者模式重构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式重构"}},[s._v("#")]),s._v(" 中介者模式重构")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",[t("code",{staticClass:"language-JavaScript"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("Player")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("name,teamColor")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name = name;\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".teamColor = teamColor;\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".state = "),t("span",{staticClass:"hljs-string"},[s._v('"live"')]),s._v(";\n}\n\nPlayer.prototype.win = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"胜利:"')]),s._v(" + "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name);\n}\n\nPlayer.prototype.lose = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"失败:"')]),s._v(" + "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name);\n}\n\nPlayer.prototype.die = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".state = "),t("span",{staticClass:"hljs-string"},[s._v("'dead'")]),s._v("\n  PlayerDirector.receiveMessage("),t("span",{staticClass:"hljs-string"},[s._v('"playerDead"')]),s._v(", "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(");\n}\n\nPlayer.prototype.remove = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  PlayerDirector.receiveMessage("),t("span",{staticClass:"hljs-string"},[s._v('"removePlayer"')]),s._v(", "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(");\n}\n\nPlayer.prototype.changeTeam = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("color")]),s._v(") ")]),s._v("{\n  PlayerDirector.receiveMessage("),t("span",{staticClass:"hljs-string"},[s._v('"playerChangeTeam"')]),s._v(", "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(", color);\n}\n\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("playerFactory")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("name, teamColor")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" newPlayer = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Player(name, teamColor);\n  PlayerDirector.receiveMessage("),t("span",{staticClass:"hljs-string"},[s._v('"addPlayer"')]),s._v(", newPlayer);\n\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" newPlayer\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" playerDirector = ("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(")")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" players = {}, "),t("span",{staticClass:"hljs-comment"},[s._v("// 保存所有玩家")]),s._v("\n  operations = {}; "),t("span",{staticClass:"hljs-comment"},[s._v("// 中介者可以执行的操作")]),s._v("\n  "),t("span",{staticClass:"hljs-comment"},[s._v("/****************新增一个玩家***************************/")]),s._v(" \n  operations.addPlayer = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v(" player ")]),s._v(")")]),s._v("{\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" teamColor = player.teamColor; "),t("span",{staticClass:"hljs-comment"},[s._v("// 玩家的队伍颜色")]),s._v("\n      players[ teamColor ] = players[ teamColor ] || []; "),t("span",{staticClass:"hljs-comment"},[s._v("// 如果该颜色的玩家还没有成立队伍，则新成立一个队伍 ")]),s._v("\n      players[ teamColor ].push( player ); "),t("span",{staticClass:"hljs-comment"},[s._v("// 添加玩家进队伍")]),s._v("\n  };\n\n  "),t("span",{staticClass:"hljs-comment"},[s._v("/****************移除一个玩家***************************/")]),s._v(" \n  operations.removePlayer = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("player")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" teamColor = player.teamColor, "),t("span",{staticClass:"hljs-comment"},[s._v("// 玩家的队伍颜色")]),s._v("\n    teamPlayers = players[teamColor] || []; "),t("span",{staticClass:"hljs-comment"},[s._v("// 该队伍所有成员")]),s._v("\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = teamPlayers.length - "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("; i >= "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("; i-- ){ "),t("span",{staticClass:"hljs-comment"},[s._v("// 遍历删除")]),s._v("\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (teamPlayers[ i ] === player) { \n        teamPlayers.splice(i, "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\n      } \n    }\n  };\n\n  "),t("span",{staticClass:"hljs-comment"},[s._v("/****************玩家换队***************************/")]),s._v(" \n  operations.changeTeam = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("player, newTeamColor")]),s._v(")")]),s._v("{ "),t("span",{staticClass:"hljs-comment"},[s._v("// 玩家换队")]),s._v("\n    operations.removePlayer(player); "),t("span",{staticClass:"hljs-comment"},[s._v("// 从原队伍中删除")]),s._v("\n    player.teamColor = newTeamColor; "),t("span",{staticClass:"hljs-comment"},[s._v("// 改变队伍颜色")]),s._v("\n    operations.addPlayer(player);"),t("span",{staticClass:"hljs-comment"},[s._v("// 增加到新队伍中")]),s._v("\n  };\n\n  "),t("span",{staticClass:"hljs-comment"},[s._v("/****************玩家死亡***************************/")]),s._v(" \n  operations.playerDead = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("player")]),s._v(")")]),s._v("{ "),t("span",{staticClass:"hljs-comment"},[s._v("// 玩家死亡")]),s._v("\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" teamColor = player.teamColor,\n    teamPlayers = players[ teamColor ]; "),t("span",{staticClass:"hljs-comment"},[s._v("// 玩家所在队伍")]),s._v("\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" all_dead = "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", player; player = teamPlayers[i++];){ \n      "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (player.state !== "),t("span",{staticClass:"hljs-string"},[s._v("'dead'")]),s._v("){\n        all_dead = "),t("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v("; \n      }\n    }\n\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (all_dead === "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(") {"),t("span",{staticClass:"hljs-comment"},[s._v("// 全部死亡")]),s._v("\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", player; player = teamPlayers[i++];){ \n        player.lose(); "),t("span",{staticClass:"hljs-comment"},[s._v("// 本队所有玩家 lose")]),s._v("\n      }\n\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" color "),t("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" players) { \n        "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (color !== teamColor) {\n          "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" teamPlayers = players[color];  "),t("span",{staticClass:"hljs-comment"},[s._v("// 其他队伍的玩家")]),s._v("\n          "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", player; player = teamPlayers[i++];) {\n            player.win(); "),t("span",{staticClass:"hljs-comment"},[s._v("// 其他队伍所有玩家 win")]),s._v("\n          } \n        }\n      }\n    }\n  }\n};\n")])])]),t("p",[s._v("在上面的代码中，除了中介者本身，没有一个玩家知道其他任何玩家的存在，玩家与玩家之间的耦合关系已经完全解除，某个玩家的任何操作都不需要通知其他玩家，而只需要给中介者发送一个消息，中介者处理完消息之后会把处理结果反馈给其他玩家对象。")]),s._v(" "),t("h2",{attrs:{id:"中介者模式的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式的优缺点"}},[s._v("#")]),s._v(" 中介者模式的优缺点")]),s._v(" "),t("ul",[t("li",[s._v("优点：中介者模式使各个对象之间得以解藕，以中介者和对象之间的一对多关系取代了对象之间的多对多关系。各个对象只需关注自身功能的实现，对象之间的交互关系交给了中介者对象来实现和维护。")]),s._v(" "),t("li",[s._v("缺点：系统中会新增一个中介者对象，对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介者对象自身往往就是一个很难以维护的对象。")])]),s._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("中介者模式是迎合迪米特法则的一种实现。迪米特法则也叫最少知识原则，是指一个对象应该尽可能少地了解另外的对象。"),t("br"),s._v("\n中介者模式可以非常方便地对模块或者对象进行解耦，但对象之间并非一定需要解藕。在实际项目中，模块或对象之间有一些依赖关系是很正常的。毕竟我们写程序是为了快速完成项目交付生产，而不是堆砌设计模式和过度设计。关键就在于如何去衡量对象之间的耦合程度。一般来说，如果对象之间的复杂耦合确实导致调用和维护出现了问题，而且这些耦合度随项目的变化呈指数增长曲线，那我们就可以考虑用中介者模式来重构代码。")])])}),[],!1,null,null,null);a.default=n.exports}}]);