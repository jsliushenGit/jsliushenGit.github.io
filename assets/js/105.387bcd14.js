(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{340:function(s,t,a){"use strict";a.r(t);var e=a(16),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("本文记录了一个前后端分离全栈项目的开发与部署流程，我会以demo的形式逐步演示。这篇文章是我各种踩坑终于把整个流程跑通之后，喜悦之余的总结分享（自己瞎琢磨，也不知道对不对）。")]),s._v(" "),a("p",[s._v("demo技术栈为"),a("code",[s._v("react + koa + Mongodb")]),s._v("及其相关技术。")]),s._v(" "),a("h2",{attrs:{id:"centos安装环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#centos安装环境"}},[s._v("#")]),s._v(" centos安装环境")]),s._v(" "),a("p",[s._v("本想使用docker一套全搞定，但是我的服务器配置太低了，拉取docker镜像到一半就超时，尝试一整晚之后无果，无奈最后只能用yum一个一个安装。安装环境之前先更新一下已有的包")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("yum update\n")])])]),a("h3",{attrs:{id:"安装nodejs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装nodejs"}},[s._v("#")]),s._v(" 安装nodeJS")]),s._v(" "),a("p",[s._v("使用yum安装指定版本node")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("yum install -y nodejs\n")])])]),a("p",[s._v("安装完成之后可以验证一下")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("node -v\n")])])]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("npm -v\n")])])]),a("p",[s._v("安装node后可以利用npm安装一下nvm和pm2")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[s._v("npm i nvm pm2 -g\n")])])]),a("p",[s._v("nvm用于node版本控制，pm2用于启动node服务以及进程守护。")]),s._v(" "),a("h3",{attrs:{id:"安装mongodb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装mongodb"}},[s._v("#")]),s._v(" 安装Mongodb")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("创建yum源文件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("vim /etc/yum.repos.d/mongodb-org-4.0.repo\n")])])]),a("p",[s._v("添加以下内容")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("[mongodb-org]\nname=MongoDB Repository\nbaseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/4.0/x86_64/\ngpgcheck=0\nenabled=1\n")])])]),a("p",[s._v("保存后退出")])]),s._v(" "),a("li",[a("p",[s._v("安装Mongodb")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("yum -y install mongodb-org\n")])])]),a("p",[s._v("安装完成之后配置Mongodb。查看并修改配置文件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("vim /etc/mongod.conf\n")])])]),a("p",[s._v("bindIp改为 0.0.0.0，支持远程访问。同时设置dbPath，目录自选。fork: true 表示后台运行mongod，这样就不用每次都重启服务了。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229164401471.png",alt:"image-20200229164401471"}})])]),s._v(" "),a("li",[a("p",[s._v("启动Mongodb")]),s._v(" "),a("p",[s._v("以配置文件的方式启动Mongodb")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("mongod --config /etc/mongod.conf\n")])])]),a("p",[s._v("启动之后服务在后台运行，验证一下")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("mongo\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/WX20200229-165420@2x.png",alt:"WX20200229-165420@2x"}})])])]),s._v(" "),a("h3",{attrs:{id:"安装nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装nginx"}},[s._v("#")]),s._v(" 安装Nginx")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("创建yum源文件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("vim /etc/yum.repos.d/nginx.repo\n")])])]),a("p",[s._v("添加以下内容")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\n")])])]),a("p",[s._v("保存后退出")])]),s._v(" "),a("li",[a("p",[s._v("安装Nginx")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("yum -y install nginx\n")])])])]),s._v(" "),a("li",[a("p",[s._v("启动Nginx")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("nginx\n")])])])])]),s._v(" "),a("h2",{attrs:{id:"本地环境安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地环境安装"}},[s._v("#")]),s._v(" 本地环境安装")]),s._v(" "),a("p",[s._v("本机不像服务器上有带宽的限制，直接上docker")]),s._v(" "),a("p",[s._v("docker具体的安装步骤见 https://www.runoob.com/docker/macos-docker-install.html")]),s._v(" "),a("p",[s._v("同时使用docker安装 mongo, mongo-express https://www.runoob.com/docker/docker-install-mongodb.html")]),s._v(" "),a("p",[s._v("安装完成之后验证一下mongo-express，打开 http://localhost:8081/")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229180554241.png",alt:"image-20200229180554241"}})]),s._v(" "),a("h2",{attrs:{id:"后端项目开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后端项目开发"}},[s._v("#")]),s._v(" 后端项目开发")]),s._v(" "),a("h3",{attrs:{id:"建数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建数据库"}},[s._v("#")]),s._v(" 建数据库")]),s._v(" "),a("p",[s._v("先建立数据库, 使用命令")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("mongo\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229184034640.png",alt:"image-20200229184034640"}})]),s._v(" "),a("p",[s._v("新建demo数据库，新建user集合，插入一条数据 {userName:  'tom', age: 18}")]),s._v(" "),a("p",[s._v("也可以使用mongo-express可视地化操作数据库，打开  http://localhost:8081/")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229184253682.png",alt:"image-20200229184253682"}})]),s._v(" "),a("p",[s._v("已经可以看到我们刚刚新建的demo数据库。这里也可以使用右上角的表单，输入数据库名，点击create DataBase 按钮新建数据库")]),s._v(" "),a("p",[s._v("点击View查看数据库")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229184533849.png",alt:"image-20200229184533849"}})]),s._v(" "),a("p",[s._v("可以看到已经建好的user集合，再点击View查看集合")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229184615879.png",alt:"image-20200229184615879"}})]),s._v(" "),a("p",[s._v("可以看到刚刚插入的那条数据。我们还可以点击 New Document 按钮可视化地添加数据")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229184752654.png",alt:"image-20200229184752654"}})]),s._v(" "),a("p",[s._v("至此大家就可以动动点赞的小手，轻松的添加删除编辑数据了")]),s._v(" "),a("h3",{attrs:{id:"项目初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目初始化"}},[s._v("#")]),s._v(" 项目初始化")]),s._v(" "),a("p",[s._v("有了数据再开始编码吧，demo使用koa开发，本地安装脚手架")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("npm install -g koa-generator\n")])])]),a("p",[s._v("初始化项目")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("koa2 -e koa-demo\n")])])]),a("p",[s._v("进入项目文件夹安装依赖")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("npm i\n")])])]),a("p",[s._v("启动项目")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("npm run dev\n")])])]),a("p",[s._v("浏览器打开 http://localhost:3000/")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229172147220.png",alt:"image-20200229172147220"}})]),s._v(" "),a("p",[s._v("修改一下项目，这里我就直接列出修改后的代码了。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229172951188.png",alt:"image-20200229172951188"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229173201562.png",alt:"image-20200229173201562"}})]),s._v(" "),a("p",[s._v("此时 http://localhost:3000/ 直接返回 hello")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229173301772.png",alt:"image-20200229173301772"}})]),s._v(" "),a("h3",{attrs:{id:"链接数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接数据库"}},[s._v("#")]),s._v(" 链接数据库")]),s._v(" "),a("p",[s._v("操作mongodb我使用的mongoose，安装依赖")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("npm i mongoose\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229180751146.png",alt:"image-20200229181032693"}})]),s._v(" "),a("p",[s._v("新建 /config/mongo.js，配置链接。app.js引入配置，初始化链接")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229183156408.png",alt:"image-20200229183156408"}})]),s._v(" "),a("h3",{attrs:{id:"新建数据模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建数据模型"}},[s._v("#")]),s._v(" 新建数据模型")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229183023869.png",alt:"image-20200229183023869"}})]),s._v(" "),a("h3",{attrs:{id:"添加model层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加model层"}},[s._v("#")]),s._v(" 添加model层")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229183044790.png",alt:"image-20200229183044790"}})]),s._v(" "),a("h3",{attrs:{id:"写个接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写个接口"}},[s._v("#")]),s._v(" 写个接口")]),s._v(" "),a("p",[s._v("这里我们直接用脚手架自带的users路由，加一个/list接口，访问数据库获取数据")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/code.png",alt:"code"}})]),s._v(" "),a("p",[s._v("一切就绪，测试一下，访问  http://localhost:3000/users/list")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229185942392.png",alt:"image-20200229185942392"}})]),s._v(" "),a("p",[s._v("加个参数试一下")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229190055076.png",alt:"image-20200229190055076"}})]),s._v(" "),a("p",[s._v("至此，node服务编写完成")]),s._v(" "),a("h2",{attrs:{id:"部署node程序到服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署node程序到服务器"}},[s._v("#")]),s._v(" 部署node程序到服务器")]),s._v(" "),a("h3",{attrs:{id:"上传文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上传文件"}},[s._v("#")]),s._v(" 上传文件")]),s._v(" "),a("p",[s._v("上传文件到服务器有很多方式，比如scp、ftp等，这里我使用的git。首先把项目上传到github，然后进入服务器使用git拉去远程仓库文件。别忘了再linux上生成 SSH Key，添加到github。")]),s._v(" "),a("p",[s._v("（这里我采用的是手动拉取代码的方式，实际上有更方便的自动化部署方案，会在下面的前端项目部署中演示）")]),s._v(" "),a("p",[s._v("https://github.com/jsliushenGit/koa-demo")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229192742313.png",alt:"image-20200229192742313"}})]),s._v(" "),a("p",[s._v("这里我在根目录下新建了service文件夹，然后clone下来项目。  此时项目路径为 /root/service/koa-demo")]),s._v(" "),a("h3",{attrs:{id:"启动服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动服务"}},[s._v("#")]),s._v(" 启动服务")]),s._v(" "),a("p",[s._v("启动项目之前先在服务器上新建数据库，新建集合，插入数据")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229191906727.png",alt:"image-20200229191906727"}})]),s._v(" "),a("p",[s._v("安装依赖")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("npm i\n")])])]),a("p",[s._v("然后以pm2启动项目（脚手架生成的项目package.json中的scripts里有prd指令，以pm2启动）")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("npm run prd\n")])])]),a("p",[s._v("此时服务监听3000端口，我们需要在阿里云的安全组规则里开放3000端口。这我们同时需要开放以下端口，方便后续操作。")]),s._v(" "),a("ul",[a("li",[s._v("开放27017端口，远程访问mongodb")]),s._v(" "),a("li",[s._v("开放8081端口，远程访问mongo-express")]),s._v(" "),a("li",[s._v("开放80端口，http访问服务器")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229193448686.png",alt:"image-20200229193448686"}})]),s._v(" "),a("p",[s._v("添加完成之后我们就可以访问了，地址为你的服务器外网ip加端口号")]),s._v(" "),a("blockquote",[a("p",[s._v("安全考虑，我上了码")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229195823955.png",alt:"image-20200229195823955"}})]),s._v(" "),a("p",[s._v("再访问接口试试")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229200054304.png",alt:"image-20200229200054304"}})]),s._v(" "),a("p",[s._v("刚刚我们添加的那条数据已经查询出来了")]),s._v(" "),a("h3",{attrs:{id:"配置nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置nginx"}},[s._v("#")]),s._v(" 配置Nginx")]),s._v(" "),a("p",[s._v("我们在访问接口时，肯定不会直接以ip+端口的方式，一般是以域名的方式，所以我们需要配置Nginx，转发我们的请求。我的域名是jsliushen.com，这里我们添加一个子域名 server.jsliushen.com，用于访问服务。同时以路径区分服务，当访问 server.jsliushen.com/demo/xxx时，转发到端口加ip")]),s._v(" "),a("p",[s._v("首先在阿里云添加域名解析")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229200435996.png",alt:"image-20200229200435996"}})]),s._v(" "),a("p",[s._v("然后编辑nginx配置")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("vim /etc/nginx/nginx.conf\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229200652660.png",alt:"image-20200229200652660"}})]),s._v(" "),a("p",[s._v("我们的项目文件在root目录下，默认是没有权限访问的，需要吧user设置为root。默认的配置里有一句 "),a("code",[s._v("include /etc/nginx/conf.d/*.conf")]),s._v(" , 也就是说在conf.d文件夹下所有conf后缀名的文件都会生效。那我们直接在conf.d下新建 server.conf 配置文件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("vim /etc/nginx/conf.d/server.conf\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229201347325.png",alt:"image-20200229201347325"}})]),s._v(" "),a("p",[s._v("保存后热重启nginx，使配置生效")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("nginx -s reload\n")])])]),a("p",[s._v("验证一下, 访问 http://server.jsliushen.com/demo/users/list")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229201715982.png",alt:"image-20200229201715982"}})]),s._v(" "),a("p",[s._v("现在我们已经有了一个线上运行的接口。至此，node后端服务的开发与部署介绍完毕。")]),s._v(" "),a("h2",{attrs:{id:"开发前端项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发前端项目"}},[s._v("#")]),s._v(" 开发前端项目")]),s._v(" "),a("p",[s._v("使用react-create-app初始化项目")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("yarn create react-app demo-client\ncd demo-client\n")])])]),a("p",[s._v("修改app.js")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229221944140.png",alt:"image-20200229221944140"}})]),s._v(" "),a("p",[s._v("本地启动项目")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("yarn start\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200229222454941.png",alt:"image-20200229222454941"}})]),s._v(" "),a("p",[s._v("前端项目开发完毕，接口正常返回，下面要做的就是把项目部署到服务器")]),s._v(" "),a("h2",{attrs:{id:"部署前端项目到服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署前端项目到服务器"}},[s._v("#")]),s._v(" 部署前端项目到服务器")]),s._v(" "),a("p",[s._v("前端静态资源部署我采用webHooks自动部署的方式")]),s._v(" "),a("blockquote",[a("p",[s._v("WebHooks的原理简单来说就是本地push代码到github时，github会监测到该行为，然后请求一个接口，在该接口中拉取远程仓库的代码，达到自动化部署的目的。")])]),s._v(" "),a("p",[s._v("在要部署项目的文件夹里初始化git，这里我放在了/root/website/demo-client")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("git init\ngit remote add origin git@github.com:jsliushenGit/demo-client.git\n")])])]),a("p",[s._v("此时项目文件夹还是空的。")]),s._v(" "),a("p",[s._v("前端项目使用的yarn管理包，锁定文件是yarn.lock，所以在服务器上也全局安装yarn")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("yum install -y yarn\n")])])]),a("h3",{attrs:{id:"编写接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写接口"}},[s._v("#")]),s._v(" 编写接口")]),s._v(" "),a("p",[s._v("接口接收来自github的请求，然后拉取远程仓库的代码。我们把接口放到 /root/service/webhook文件夹下")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301010500047.png",alt:"image-20200301010500047"}})]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",[a("code",{staticClass:"language-javascript"},[a("span",{staticClass:"hljs-comment"},[s._v("// index.js")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" http = "),a("span",{staticClass:"hljs-built_in"},[s._v("require")]),s._v("("),a("span",{staticClass:"hljs-string"},[s._v("'http'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" exec = "),a("span",{staticClass:"hljs-built_in"},[s._v("require")]),s._v("("),a("span",{staticClass:"hljs-string"},[s._v("'child_process'")]),s._v(").exec;\n\nhttp.createServer("),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("request, response")]),s._v(") ")]),s._v("{\n  response.writeHead("),a("span",{staticClass:"hljs-number"},[s._v("200")]),s._v(", {\n    "),a("span",{staticClass:"hljs-string"},[s._v("'Content-Type'")]),s._v(": "),a("span",{staticClass:"hljs-string"},[s._v("'application/json'")]),s._v("\n  });\n  response.end();\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// 判断接口是否来自github，触发的行为是否是push")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (request.headers["),a("span",{staticClass:"hljs-string"},[s._v("'x-github-event'")]),s._v("] && request.headers["),a("span",{staticClass:"hljs-string"},[s._v("'x-github-event'")]),s._v("] === "),a("span",{staticClass:"hljs-string"},[s._v("'push'")]),s._v(") {\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 部署方法")]),s._v("\n    runCommand();\n  }\n\n}).listen("),a("span",{staticClass:"hljs-number"},[s._v("7777")]),s._v(");\n\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("runCommand")]),s._v("("),a("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  exec("),a("span",{staticClass:"hljs-string"},[s._v('"/root/service/webhook/deploy.sh"')]),s._v(", "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),a("span",{staticClass:"hljs-params"},[s._v("err, stdout, stderr")]),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (err) {\n      "),a("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),a("span",{staticClass:"hljs-string"},[s._v("'error:'")]),s._v(" + stderr);\n    } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n      "),a("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),a("span",{staticClass:"hljs-string"},[s._v('"stdout:"')]),s._v(" + stdout);\n    }\n  });\n}\n")])])]),a("p",[s._v("上面的代码应该很好理解，就不做过多说明了。下面是deploy.sh")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",[a("code",{staticClass:"language-bash"},[a("span",{staticClass:"hljs-meta"},[s._v("#! /bin/bash\n")]),s._v("\nWEB_PATH="),a("span",{staticClass:"hljs-string"},[s._v("'/root/website/demo-client'")]),s._v("\n\n"),a("span",{staticClass:"hljs-built_in"},[s._v("echo")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"start deployment"')]),s._v("\n"),a("span",{staticClass:"hljs-comment"},[s._v("# 进入要部署的项目文件夹")]),s._v("\n"),a("span",{staticClass:"hljs-built_in"},[s._v("cd")]),s._v(" "),a("span",{staticClass:"hljs-variable"},[s._v("$WEB_PATH")]),s._v("\n\n"),a("span",{staticClass:"hljs-built_in"},[s._v("echo")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"fetching from remote..."')]),s._v("\n"),a("span",{staticClass:"hljs-comment"},[s._v("# 拉取代码")]),s._v("\ngit fetch --all\n\ngit reset --hard origin/master\n\n"),a("span",{staticClass:"hljs-built_in"},[s._v("echo")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"remove build"')]),s._v("\n"),a("span",{staticClass:"hljs-comment"},[s._v("# 删除之前构建的文件夹（最新的create-react-app中构建默认目录为build）")]),s._v("\nrm -rf /build\n\n"),a("span",{staticClass:"hljs-built_in"},[s._v("echo")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"install dependencies"')]),s._v("\n"),a("span",{staticClass:"hljs-comment"},[s._v("# 安装依赖")]),s._v("\nyarn\n\n"),a("span",{staticClass:"hljs-built_in"},[s._v("echo")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"start build"')]),s._v("\n"),a("span",{staticClass:"hljs-comment"},[s._v("# 开始打包")]),s._v("\nyarn build\n\n"),a("span",{staticClass:"hljs-built_in"},[s._v("echo")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"done"')]),s._v("\n")])])]),a("p",[s._v("使用pm2启动这个服务")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("pm2 start /root/service/webhook/index.js --name webhooks\n")])])]),a("p",[s._v("服务器端的工作基本已经完成，别忘了服务监听的7777端口，还需要在阿里云安全组规则里开放7777端口。")]),s._v(" "),a("h3",{attrs:{id:"github配置webhooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github配置webhooks"}},[s._v("#")]),s._v(" github配置webhooks")]),s._v(" "),a("p",[s._v("在github仓库的设置里，webhooks中添加一个webhook，payload URL填写请求地址，也就是上面编写的那个接口的地址，服务器公网ip+端口，同样也可以配置Nginx，变成域名的方式，参考上面的部署node程序到服务器一节。secret是自己设定的密钥，用于校验。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301011151157.png",alt:"image-20200301011151157"}})]),s._v(" "),a("p",[s._v("填写完成之后保存添加，然后试用一下。")]),s._v(" "),a("h3",{attrs:{id:"验证webhooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证webhooks"}},[s._v("#")]),s._v(" 验证webhooks")]),s._v(" "),a("p",[s._v("本地项目push代码至远程仓库，同时查看pm2日志")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("pm2 logs webhooks\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301022518582.png",alt:"image-20200301022518582"}})]),s._v(" "),a("p",[s._v("部署完成后查看项目文件夹 /website/demo-client/")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301022635224.png",alt:"image-20200301022635224"}})]),s._v(" "),a("p",[s._v("文件拉取成功，也打包成功。")]),s._v(" "),a("h3",{attrs:{id:"配置前端nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置前端nginx"}},[s._v("#")]),s._v(" 配置前端Nginx")]),s._v(" "),a("p",[s._v("前端静态文件想要访问的话还需要配置Nginx，和之前后端服务配置Nginx一样，在/etc/nginx/conf.d目录下新建配置文件。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("vim /etc/nginx/conf.d/demo_client.conf\n")])])]),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301023226562.png",alt:"image-20200301023226562"}})]),s._v(" "),a("p",[s._v("设置二级域名 demo-client.jsliushen.com，同时在阿里云域名解析里解析二级域名")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301023645511.png",alt:"image-20200301023645511"}})]),s._v(" "),a("p",[s._v("热启动nginx，是配置生效")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",[a("code",{staticClass:"language-shell"},[s._v("nginx -s reload\n")])])]),a("h3",{attrs:{id:"访问前端项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问前端项目"}},[s._v("#")]),s._v(" 访问前端项目")]),s._v(" "),a("p",[s._v("打开 http://demo-client.jsliushen.com/")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://jsliushen-image.test.upcdn.net/node/image-20200301023749049.png",alt:"image-20200301023749049"}})]),s._v(" "),a("p",[s._v("至此，前端项目的开发与部署介绍完毕。")]),s._v(" "),a("h2",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),a("p",[s._v("本文demo的前端和后端代码会在github一直保存，临时创建的二级域名和服务以及部分开放的端口，会在本文发出的一周后(2020.3.8)下掉，安全考虑，望理解。")]),s._v(" "),a("p",[s._v("本文基本没有原理性的介绍，纯步骤代码演示，希望能对大家有帮助。")])])}),[],!1,null,null,null);t.default=n.exports}}]);